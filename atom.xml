<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[alanthing]]></title>
  <link href="http://alanthing.com/atom.xml" rel="self"/>
  <link href="http://alanthing.com/"/>
  <updated>2013-03-18T22:24:41-04:00</updated>
  <id>http://alanthing.com/</id>
  <author>
    <name><![CDATA[Alan Ivey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VirtualBox Extension Pack With One Line]]></title>
    <link href="http://alanthing.com/blog/2013/03/17/virtualbox-extension-pack-with-one-line/"/>
    <updated>2013-03-17T20:46:00-04:00</updated>
    <id>http://alanthing.com/blog/2013/03/17/virtualbox-extension-pack-with-one-line</id>
    <content type="html"><![CDATA[<p>Just installed <a href="http://www.virtualbox.org">VirtualBox</a> on OS X and need the <a href="http://www.virtualbox.org/wiki/Downloads">Extension Pack</a>? This (really long) one-liner will download and install it for you. Run in terminal and enter your password once and you&#39;re off to the races!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export version=$(/usr/bin/vboxmanage -v) && export var1=$(echo ${version} | cut -d 'r' -f 1) && export var2=$(echo ${version} | cut -d 'r' -f 2) && export file="Oracle_VM_VirtualBox_Extension_Pack-${var1}-${var2}.vbox-extpack" && curl --silent --location http://download.virtualbox.org/virtualbox/${var1}/${file} -o ~/Downloads/${file} && VBoxManage extpack install ~/Downloads/${file} --replace && rm ~/Downloads/${file} && unset version var1 var2 file</span></code></pre></td></tr></table></div></figure>

<p>Note that VirtualBox must be installed first :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Real-time" Ruby Gem Development]]></title>
    <link href="http://alanthing.com/blog/2013/02/21/real-time-ruby-gem-development/"/>
    <updated>2013-02-21T08:08:00-05:00</updated>
    <id>http://alanthing.com/blog/2013/02/21/real-time-ruby-gem-development</id>
    <content type="html"><![CDATA[<p>Recently, I&#39;ve been working on adding functionality for <a href="http://www.stormondemand.com">Storm on Demand</a>&#39;s <a href="https://www.stormondemand.com/api/docs/1.0/">API</a> to the excellent <a href="http://fog.io">fog</a> library. There didn&#39;t seem to be a clear way, that I could find, to work on a Ruby gem in real-time, meaning I save the file in my editor and immediately run some code. Most <a href="http://gembundler.com/rubygems.html">guides</a> I <a href="http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html">found</a> tended to advise to create the gem file and install it. <a href="http://rakeroutes.com/blog/lets-write-a-gem-part-two/">Stephen Ball demostrates</a> the use of <code>bundle console</code> which drops you into <code>irb</code> for testing, but I was looking for a way to test my own scripts outside of a shell with my recently-saved gem files. </p>

<p>Thankfully this isn&#39;t too difficult to set up and this will allow you to work on your gem in &quot;real-time;&quot; save and test, without <code>bundle console</code> or installing lots of dev gems.</p>

<p>I should note two things here: I&#39;m not a Ruby developer, and I&#39;ve really only tested this thoroughly with fog, no others. If this ends up being a terrible way to do things, please let me know.</p>

<p>I&#39;m using <a href="http://rvm.io/">RVM</a> to keep my gem development isolated from the rest of my system. If you haven&#39;t already, <a href="https://rvm.io/rvm/install/">set up rvm</a> on your system. If you&#39;re using <a href="https://github.com/sstephenson/rbenv">rbenv</a> instead, use <a href="https://github.com/jamis/rbenv-gemset">applicable commands</a>.</p>

<p>You&#39;ll obviously need to start in a gem development directory. In my case, I start with fog:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:fog/fog.git
</span><span class='line'>cd fog</span></code></pre></td></tr></table></div></figure>

<p>I&#39;m going to switch to ruby 1.9.3 and use a new gemset called fogdev:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.3 && rvm gemset create fogdev && rvm use 1.9.3@fogdev</span></code></pre></td></tr></table></div></figure>

<p>You may want to create a <code>.rvmrc</code> file so you don&#39;t have to use <code>rvm use</code> constantly.</p>

<p>Install the prerequesite gems as listed in the gemspec file with bundler:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>

<p>I&#39;m going to grab the version number of fog from the gemspec file so I can reuse it later (if there are multiple &#39;.gemspec&#39; files in your directory, change &#39;*.gemspec&#39; to &#39;name.gemspec&#39; as appropriate):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export GEMVERSION=$(grep -E '^[ \t]+s.version' *.gemspec | awk '{print $3}' | sed 's/'\''//g')</span></code></pre></td></tr></table></div></figure>

<p>Now at this point, you can build and install the gem with <code>rake build &amp;&amp; gem install pkg/fog-${GEMVERSION}.gem</code> or <code>gem build</code> or any other tools as most tutorials advise, but then whenever you edit the source files you&#39;ll have to repeat. Let&#39;s create some symbolic links instead. Start by going to the rvm gemset folder (this may be a different location for your environment):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.rvm/gems/ruby-1.9.3-p286\@fogdev/</span></code></pre></td></tr></table></div></figure>

<p>It seems as though the earlier <code>bundle install</code> command created the file bin/fog for me, but it doesn&#39;t work without either installing a gem or running the remaining commands below. Particularly for fog, if this bin/fog file is missing and you need it, you can grab it with the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ ! -f bin/fog ] && curl --silent --output bin/fog https://gist.github.com/alanthing/5004411/raw/13f748f1cc19df7511ea2a01de6824eac3358905/fog && chmod +x bin/fog</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s add our development gem with symbolic links (again, change as appropriate for your gem):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s ~/fog/fog.gemspec specifications/fog-${GEMVERSION}.gemspec
</span><span class='line'>ln -s ~/fog gems/fog-${GEMVERSION}</span></code></pre></td></tr></table></div></figure>

<p>Now if you run <code>gem list</code> you should see your gem listed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem list
</span><span class='line'>...snip...
</span><span class='line'>ffi (1.0.11)
</span><span class='line'>fission (0.4.0)
</span><span class='line'>fog (1.9.0)
</span><span class='line'>formatador (0.2.4)
</span><span class='line'>jekyll (0.12.0)
</span><span class='line'>...snip...</span></code></pre></td></tr></table></div></figure>

<p>And, in my case, running <code>fog</code> uses the gemset file bin/fog and drops me into a fog-ised irb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ fog
</span><span class='line'>  Welcome to fog interactive!
</span><span class='line'>  :default provides VirtualBox and Vmfusion
</span><span class='line'>&gt;&gt; </span></code></pre></td></tr></table></div></figure>

<p>If you see any mistakes or have any questions, let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usable MAMP on OS X 10.8 Mountain Lion]]></title>
    <link href="http://alanthing.com/blog/2012/12/19/usable-mamp-os-x-108-mountain-lion/"/>
    <updated>2012-12-19T11:18:00-05:00</updated>
    <id>http://alanthing.com/blog/2012/12/19/usable-mamp-os-x-108-mountain-lion</id>
    <content type="html"><![CDATA[<h2 id="toc_0">Install MAMP</h2>

<p>Download the latest MAMP from <a href="http://mamp.info/en/downloads/index.html">http://mamp.info/en/downloads/index.html</a> and run the installer.</p>

<h2 id="toc_1">Choose APC Cache</h2>

<p>Open the MAMP app, open <strong>Preferences&#8230;</strong>, click the <strong>PHP</strong> tab, and change <strong>Cache</strong> to <strong>APC</strong>. Click <strong>OK</strong> to close Preferences and <strong>Quit</strong> MAMP.</p>

<p><img src="http://i46.tinypic.com/2wltqpw.png" alt="MAMP Screenshot"></p>

<h2 id="toc_2">PATH variable</h2>

<p>Put MAMP binaries, including PHP, in the front of your $PATH (this is a single command):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;/Applications/MAMP/bin:/Applications/MAMP/Library/bin:$(find /Applications/MAMP/bin/php -type d -name &quot;php5.4*&quot; | sort | tail -1)/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bash_profile <span class="o">&amp;&amp;</span> <span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_3">MySQL</h2>

<p>Set up MySQL and stop it (default MySQL password is <strong>root</strong>, you do not have to change it when running <code>mysql_secure_installation</code>, though I recommend all of the other defaults):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp -va /Applications/MAMP/Library/support-files/my-small.cnf /Applications/MAMP/conf/my.cnf
</span><span class='line'>
</span><span class='line'>sed -i <span class="s1">&#39;&#39;</span> <span class="s2">&quot;s/^\(max_allowed_packet =\) [0-9]*M/\1 1G/g&quot;</span> /Applications/MAMP/conf/my.cnf
</span><span class='line'>
</span><span class='line'>egrep <span class="s2">&quot;^# Uncomment the following if you are using InnoDB tables$&quot;</span> /Applications/MAMP/conf/my.cnf &amp;&gt;/dev/null <span class="o">&amp;&amp;</span> sed -i <span class="s1">&#39;&#39;</span> <span class="s2">&quot;s/^\(# Uncomment the following if you are using InnoDB tables\)$/\1@innodb_file_per_table/; y/@/\n/; s/^#\(innodb_.*\)/\1/g&quot;</span> /Applications/MAMP/conf/my.cnf
</span><span class='line'>
</span><span class='line'>/Applications/MAMP/bin/startMysql.sh &amp;
</span><span class='line'>
</span><span class='line'><span class="c"># Secure MySQL setup:</span>
</span><span class='line'>/Applications/MAMP/Library/bin/mysql_secure_installation
</span><span class='line'><span class="c"># -- OR --</span>
</span><span class='line'><span class="c"># Less secure MySQL setup:</span>
</span><span class='line'><span class="c">#/Applications/MAMP/Library/bin/mysql -uroot -proot -e&quot;DELETE FROM mysql.user WHERE User=&#39;&#39;; DELETE FROM mysql.user WHERE User=&#39;root&#39; AND Host!=&#39;localhost&#39;; FLUSH PRIVILEGES;&quot;</span>
</span><span class='line'>
</span><span class='line'>/Applications/MAMP/bin/stopMysql.sh
</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_4">PHP</h2>

<p>Set timezone, and increase timeouts and memory values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -i <span class="s1">&#39;-default&#39;</span> <span class="s2">&quot;s|^;*\(date\.timezone[[:space:]]*=\).*|\1 \&quot;`systemsetup -gettimezone|awk -F&quot;</span><span class="se">\:</span> <span class="s2">&quot; &#39;{print $2}&#39;`\&quot;|; s|^\(memory_limit[[:space:]]*=\).*\(\;.*\)|\1 256M \2|; s|^\(post_max_size[[:space:]]*=\).*|\1 200M|; s|^\(upload_max_filesize[[:space:]]*=\).*|\1 100M|; s|^\(default_socket_timeout[[:space:]]*=\).*|\1 600|; s|^\(max_execution_time[[:space:]]*=\).*\(\;.*\)|\1 300 \2|; s|^\(max_input_time[[:space:]]*=\).*\(\;.*\)|\1 600 \2|;&quot;</span> <span class="k">$(</span>find /Applications/MAMP/bin/php -type d -name <span class="s2">&quot;php5.4*&quot;</span> | sort | tail -1<span class="k">)</span>/conf/php.ini
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\n[apc]\napc.shm_size = 192M\napc.rfc1867 = 1&quot;</span> &gt;&gt; <span class="k">$(</span>find /Applications/MAMP/bin/php -type d -name <span class="s2">&quot;php5.4*&quot;</span> | sort | tail -1<span class="k">)</span>/conf/php.ini
</span></code></pre></td></tr></table></div></figure>

<h3 id="toc_5">PECL Uploadprogress</h3>

<p><strong>Feel free to skip:</strong> This is quite involved when <code>apc.rfc1867=1</code> does the job in most cases. This is mostly an exercise in building PHP modules for MAMP. </p>

<p><strong>You&#39;ll need to install Xcode Command Line Tools from <a href="http://develop.apple.com/downloads">http://develop.apple.com/downloads</a> in order to complete all of the steps below.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p <span class="k">$(</span>find /Applications/MAMP/bin/php -type d -name <span class="s2">&quot;php5.4*&quot;</span> | sort | tail -1<span class="k">)</span>/include
</span><span class='line'><span class="nb">cd</span> <span class="k">$(</span>find /Applications/MAMP/bin/php -type d -name <span class="s2">&quot;php5.4*&quot;</span> | sort | tail -1<span class="k">)</span>/include
</span><span class='line'><span class="nb">export </span><span class="nv">PHPVER</span><span class="o">=</span><span class="k">$(</span><span class="nb">cd</span> /Applications/MAMP/bin/php <span class="o">&amp;&amp;</span> find * -type d -name <span class="s2">&quot;php5.4*&quot;</span> | sort | tail -1 | sed <span class="s1">&#39;s/php//&#39;</span><span class="k">)</span> <span class="o">&amp;&amp;</span> curl -L -o php-<span class="k">${</span><span class="nv">PHPVER</span><span class="k">}</span>.tar.bz2 http://us3.php.net/get/php-<span class="k">${</span><span class="nv">PHPVER</span><span class="k">}</span>.tar.bz2/from/us3.php.net/mirror <span class="o">&amp;&amp;</span> <span class="nb">unset </span>PHPVER
</span><span class='line'>ls php-5.4*bz2 | xargs -L1 tar jxpf <span class="o">&amp;&amp;</span> rm php-5.4*bz2
</span><span class='line'>mv -v <span class="k">$(</span>find * -type d -name <span class="s2">&quot;php-5.4*&quot;</span><span class="k">)</span> php
</span><span class='line'><span class="nb">cd </span>php
</span><span class='line'>./configure
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>
</span><span class='line'><span class="c">## Build automake and related tools</span>
</span><span class='line'><span class="nb">export </span><span class="nv">build</span><span class="o">=</span><span class="s2">&quot;$PWD/build&quot;</span>
</span><span class='line'>mkdir -p <span class="nv">$build</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$build</span>
</span><span class='line'>curl -OL http://ftpmirror.gnu.org/autoconf/autoconf-2.68.tar.gz
</span><span class='line'>tar xzf autoconf-2.68.tar.gz
</span><span class='line'><span class="nb">cd </span>autoconf-2.68
</span><span class='line'>./configure --prefix<span class="o">=</span><span class="nv">$build</span>/autotools-bin
</span><span class='line'>make
</span><span class='line'>make install
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$build</span>/autotools-bin/bin
</span><span class='line'><span class="nb">cd</span> <span class="nv">$build</span>
</span><span class='line'>curl -OL http://ftpmirror.gnu.org/automake/automake-1.11.tar.gz
</span><span class='line'>tar xzf automake-1.11.tar.gz
</span><span class='line'><span class="nb">cd </span>automake-1.11
</span><span class='line'>./configure --prefix<span class="o">=</span><span class="nv">$build</span>/autotools-bin
</span><span class='line'>make
</span><span class='line'>make install
</span><span class='line'><span class="nb">cd</span> <span class="nv">$build</span>
</span><span class='line'>curl -OL http://ftpmirror.gnu.org/libtool/libtool-2.4.tar.gz
</span><span class='line'>tar xzf libtool-2.4.tar.gz
</span><span class='line'><span class="nb">cd </span>libtool-2.4
</span><span class='line'>./configure --prefix<span class="o">=</span><span class="nv">$build</span>/autotools-bin
</span><span class='line'>make
</span><span class='line'>make install
</span><span class='line'><span class="nb">cd</span> <span class="nv">$build</span>
</span><span class='line'><span class="nb">unset </span>build
</span><span class='line'>rm autoconf-2.68.tar.gz automake-1.11.tar.gz libtool-2.4.tar.gz
</span><span class='line'>rm -rf autoconf-2.68 automake-1.11 libtool-2.4
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>
</span><span class='line'>pecl download uploadprogress
</span><span class='line'>ls uploadprogress*z | xargs -L1 tar zxpf <span class="o">&amp;&amp;</span> rm -v uploadprogress*z package*xml
</span><span class='line'>mv -v <span class="k">$(</span>find * -type d -name <span class="s2">&quot;uploadprogress*&quot;</span><span class="k">)</span> uploadprogress
</span><span class='line'><span class="nb">cd </span>uploadprogress
</span><span class='line'>phpize
</span><span class='line'>./configure --with-php-config<span class="o">=</span><span class="k">$(</span>find /Applications/MAMP/bin/php -type d -name <span class="s2">&quot;php5.4*&quot;</span> | sort | tail -1<span class="k">)</span>/bin/php-config
</span><span class='line'>make
</span><span class='line'>make install
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\n[uploadprogress]\nextension=uploadprogress.so&quot;</span> &gt;&gt; <span class="k">$(</span>find /Applications/MAMP/bin/php -type d -name <span class="s2">&quot;php5.4*&quot;</span> | sort | tail -1<span class="k">)</span>/conf/php.ini
</span></code></pre></td></tr></table></div></figure>

<p>Reference 1: <a href="http://www.lullabot.com/articles/installing-php-pear-and-pecl-extensions-on-mamp-mac-os-x-107-lion">http://www.lullabot.com/articles/installing-php-pear-and-pecl-extensions-on-mamp-mac-os-x-107-lion</a><br>
Reference 2: <a href="http://jsdelfino.blogspot.com/2012/08/autoconf-and-automake-on-mac-os-x.html">http://jsdelfino.blogspot.com/2012/08/autoconf-and-automake-on-mac-os-x.html</a></p>

<h2 id="toc_6">Apache</h2>

<p>Set up VirtualHosts in <strong>~/Sites/mamp-vhosts.conf</strong> so it&#39;s easy to edit later:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp -av /Applications/MAMP/conf/apache/httpd.conf<span class="o">{</span>,-default<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">USERHOME</span><span class="o">=</span><span class="k">$(</span>dscl . -read /Users/<span class="sb">`</span>whoami<span class="sb">`</span> NFSHomeDirectory | awk -F<span class="s2">&quot;\: &quot;</span> <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> -e <span class="s2">&quot;\n# User VirtualHosts file (added after MAMP installer)\nInclude ${USERHOME}/Sites/mamp-vhosts.conf&quot;</span> &gt;&gt; /Applications/MAMP/conf/apache/httpd.conf <span class="o">&amp;&amp;</span> <span class="nb">unset </span>USERHOME
</span><span class='line'>
</span><span class='line'><span class="o">[</span> ! -d ~/Sites/logs <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir -pv ~/Sites/logs
</span></code></pre></td></tr></table></div></figure>

<p><strong><em>IMPORTANT!</em></strong> Be sure to copy and paste the lines containing <code>PORTNUM</code> through the last <code>EOF</code> as a <strong><em>single</em></strong> command (this entire block is a single copy+paste):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="err">PORTNUM=$(</span><span class="nb">egrep</span> &#39;^Listen [0-9]*&#39; <span class="sx">/Applications/MAMP/conf/apache/httpd.conf</span> | awk &#39;{print $2}&#39;) USERHOME=$(dscl . -read <span class="sx">/Users/</span>`whoami` NFSHomeDirectory | awk -F<span class="s2">&quot;\: &quot;</span> &#39;{print $2}&#39;) cat &gt; ~/Sites/mamp-vhosts.conf &lt;&lt;EOF
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Use name-based virtual hosting.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">NameVirtualHost</span> *:${PORTNUM}
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Set up permissions for VirtualHosts in ~/Sites</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nt">&lt;Directory</span> <span class="s">&quot;${USERHOME}/Sites&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> Indexes FollowSymLinks MultiViews
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">All</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'><span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For http://localhost in the MAMP default location</span>
</span><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">_default_:${PORTNUM}</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">ServerName</span> localhost
</span><span class='line'>    <span class="nb">DocumentRoot</span> <span class="s2">&quot;/Applications/MAMP/htdocs&quot;</span>
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># VirtualHosts</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c">## VirtualHost template</span>
</span><span class='line'><span class="c">#&lt;VirtualHost *:${PORTNUM}&gt;</span>
</span><span class='line'><span class="c">#  ServerName domain.local</span>
</span><span class='line'><span class="c">#  CustomLog &quot;${USERHOME}/Sites/logs/domain.local-access_log&quot; combined</span>
</span><span class='line'><span class="c">#  ErrorLog &quot;${USERHOME}/Sites/logs/domain.local-error_log&quot;</span>
</span><span class='line'><span class="c">#  DocumentRoot &quot;${USERHOME}/Sites/domain.local&quot;</span>
</span><span class='line'><span class="c">#&lt;/VirtualHost&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Automatic VirtualHosts</span>
</span><span class='line'><span class="c"># A directory at ${USERHOME}/Sites/webroot can be accessed at http://webroot.dev</span>
</span><span class='line'><span class="c"># In Drupal, uncomment the line in .htaccess with: RewriteBase /</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This log format will display the per-virtual-host as the first field followed by a typical log line</span>
</span><span class='line'><span class="nb">LogFormat</span> <span class="s2">&quot;%V %h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%{Referer}i\&quot; \&quot;%{User-Agent}i\&quot;&quot;</span> combinedmassvhost
</span><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:${PORTNUM}</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> dev
</span><span class='line'>  <span class="nb">ServerAlias</span> *.dev
</span><span class='line'>
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="s2">&quot;${USERHOME}/Sites/logs/dev-access_log&quot;</span> combinedmassvhost
</span><span class='line'>  <span class="nb">ErrorLog</span> <span class="s2">&quot;${USERHOME}/Sites/logs/dev-error_log&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">VirtualDocumentRoot</span> ${USERHOME}/Sites/%-2+
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span><span class='line'><span class="nb">EOF</span>
</span></code></pre></td></tr></table></div></figure>

<p>If you read that closely, you&#39;ll see that it&#39;s set up to do <a href="http://httpd.apache.org/docs/2.2/vhosts/mass.html">MassVirtualHosts</a> using the <code>*.dev</code> tld. For example, set up a web root at <code>$HOME/Sites/project</code> and you will be able to view it at <a href="http://project.dev:8888">http://project.dev:8888</a> without needing to create a separate VirtualHost. A custom log format is used, putting the domain name at the beginning of the line, so you can easily see the output as it related to a project.</p>

<h2 id="toc_7">Finishing Up</h2>

<p>Open the MAMP application to <strong>Start Servers</strong>. Note that if you ever change the Apache port number, you&#39;ll need to edit <code>~/Sites/mamp-vhosts.conf</code> appropriately.</p>

<p>As always with MAMP, you can work out of <a href="http://localhost:8888/">http://localhost:8888/</a> by putting files in <code>/Applications/MAMP/htdocs</code>. For example, the folder <code>/Applications/MAMP/drupal</code> will be accessible at <a href="http://localhost:8888/drupal">http://localhost:8888/drupal</a>. You can find other MAMP tools at <a href="http://localhost:8888/MAMP">http://localhost:8888/MAMP</a>.</p>

<p>If you&#39;re having trouble connecting to MySQL with Sequel Pro or another utility, use <code>/Applications/MAMP/tmp/mysql/mysql.sock</code> as the socket path. If MAMP&#39;s MySQL is the only service running mysqld, this should not be necessary but YMMV&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache modules on OS X with Homebrew]]></title>
    <link href="http://alanthing.com/blog/2012/09/04/apache-modules-on-os-x-with-homebrew/"/>
    <updated>2012-09-04T11:27:00-04:00</updated>
    <id>http://alanthing.com/blog/2012/09/04/apache-modules-on-os-x-with-homebrew</id>
    <content type="html"><![CDATA[<p>I have long been a big fan of <a href="http://mxcl.github.com/homebrew">Homebrew</a>, a way of adding open-source software to OS X without much of the overhead and systems link <a href="http://www.macports.org">MacPorts</a> and <a href="http://www.finkproject.org">Fink</a> introduce. It&#39;s quickly become my favorite way to do PHP-based development on a Mac, and I&#39;ve <a href="http://echodittolabs.org/blog/2012/04/os-x-107-lion-development-nginx-php-mariadb-homebrew">blogged</a> <a href="http://echodittolabs.org/blog/2011/09/os-x-107-lion-development-native-apache-php-homebrew-mysql-or-mariadb">before</a> about various ways to integrate Homebrew-based software into your workflow.</p>

<p>In preparing new documentation for using Homebrew on 10.7 and 10.8 (coming soon to <a href="http://echodittolabs.org/blogs/alan-ivey">my EchoDitto blog</a>), I wanted to find a way to run either <a href="http://httpd.apache.org/docs/2.2/mod/mod_suexec.html">mod_suexec</a> or <a href="http://www.fastcgi.com/mod_fastcgi/docs/mod_fastcgi.html">mod_fastcgi</a> so I could use the built-in version of Apache without having to change folder ownership in random places where the web server needed to modify files. Homebrew did not have any formulas, but I found that <a href="http://github.com/lifepillar">Lifepillar</a> had written formulas <a href="https://github.com/mxcl/homebrew/pull/12093/files">(mod_fastcgi)</a> <a href="https://github.com/mxcl/homebrew/pull/12091">(mod_suexec)</a> for them both and was hoping to get them into Homebrew.</p>

<p>Driven solely by my desire to have my documentation easier to follow, I set up a <a href="https://github.com/mxcl/homebrew/wiki/Homebrew-0.9">brew tap</a> for these two Apache modules. Shortly after adding it to the list of <a href="https://github.com/mxcl/homebrew/wiki/Interesting-Taps-&amp;-Branches">interesting taps and branches</a>, the decision was made to <a href="https://github.com/mxcl/homebrew/issues/14622">incorporate the repository under the Homebrew organization</a> and have a place just for Apache modules.</p>

<p>As of today, here are the modules available in the tap:</p>

<ul>
<li><a href="https://github.com/Homebrew/homebrew-apache/blob/master/mod_fastcgi.rb">mod_fastcgi</a> - written by <a href="https://github.com/lifepillar">lifepillar</a></li>
<li><a href="https://github.com/Homebrew/homebrew-apache/blob/master/mod_suexec.rb">mod_suexec</a> - written by <a href="https://github.com/lifepillar">lifepillar</a>, 10.8 work by <a href="https://github.com/alanthing">me</a></li>
<li><a href="https://github.com/Homebrew/homebrew-apache/blob/master/mod_fcgid.rb">mod_fcgid</a> - written by <a href="https://github.com/rjocoleman">rjocoleman</a></li>
<li><a href="https://github.com/Homebrew/homebrew-apache/blob/master/mod_bonjour.rb">mod_bonjour</a> - written by <a href="https://github.com/joemaller">joemaller</a></li>
<li><a href="https://github.com/Homebrew/homebrew-apache/blob/master/mod_python.rb">mod_python</a> and <a href="https://github.com/Homebrew/homebrew-apache/blob/master/mod_wsgi.rb">mod_wsgi</a> - copied from main Homebrew formulas</li>
</ul>

<p>If you have any problems or questions, let me know in the issue queue! Or write a formula and submit a pull request!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three ways to get Drush on OS X]]></title>
    <link href="http://alanthing.com/blog/2012/08/29/three-ways-get-drush-os-x/"/>
    <updated>2012-08-29T15:18:00-04:00</updated>
    <id>http://alanthing.com/blog/2012/08/29/three-ways-get-drush-os-x</id>
    <content type="html"><![CDATA[<p><a href="http://echodittolabs.org/blog/2011/03/keep-drush-up-to-date">As I&#39;ve said before</a>, we love <a href="http://drupal.org/project/drush">drush</a>. It&#39;s hard to imagine doing Drupal work without it. If OS X is your workstation, it&#39;s pretty simple to install with pear, as described on the project page. Let&#39;s review that method and cover two others, git and Homebrew, and how to keep them updated.</p>

<p>All commands listed below are to be executed on the command line with the Terminal application. But if you use Drush regularly then you already knew that!</p>

<h2 id="toc_0">Homebrew</h2>

<p>If you need introduced to Homebrew, or need help installing it, check out the <a href="http://mxcl.github.com/homebrew/">Homebrew project homepage</a>. The installation script is at the bottom.</p>

<p>Ready to install drush?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install drush</span></code></pre></td></tr></table></div></figure>

<p>Yup, that&#39;s it! Upgrading is simple as well, as explained in the <a href="https://github.com/mxcl/homebrew/wiki/FAQ">Homebrew FAQ</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew update
</span><span class='line'>brew upgrade drush</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_1">PEAR</h2>

<p>Whether you&#39;ve installed your own copy of PHP with Homebrew, are using the one included with MAMP, or the version provided by OS X, drush is easy to install using the <code>pear</code> command.</p>

<p>If you are using the built-in php with OS X, you&#39;ll need to prefix each command with <code>sudo</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pear channel-discover pear.drush.org</span></code></pre></td></tr></table></div></figure>

<p><strong>Homebrew Note:</strong> If you are using Homebrew and get an error about not being able to create a lock file, run the following command (change php54 to php53 if applicable): <code>touch $(brew --prefix php54)/lib/php/.lock &amp;&amp; chmod 0644 $(brew --prefix php54)/lib/php/.lock</code></p>

<p>Continue by installing drush now that the channel is added:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pear install drush/drush
</span><span class='line'>pear upgrade --force Console_Getopt</span></code></pre></td></tr></table></div></figure>
    

<p><strong>Homebrew Note:</strong> If you do not have drush available in your path after installing, relink PHP and you should then have the symlink available in <em>/usr/local/bin</em>: <code>brew unlink php54 &amp;&amp; brew link php54</code></p>

<p>Upgrading is also easy (again, if using the built-in PHP with OS X, prefix with <code>sudo</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pear channel-update pear.drush.org
</span><span class='line'>pear upgrade drush</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_2">Git</h2>

<p>If you would prefer to keep track of the source code for Drush, or perhaps be a contributor, you will want to use Git so you can easily make and keep track of changes. If you do not have git installed on your system, install <a href="http://itunes.apple.com/us/app/xcode/id497799835?mt=12">Xcode</a> or <a href="http://developer.apple.com/downloads">Command Line Tools for Xcode</a> and then proceed. These commands will clone the drush repository, checkout the latest stable tag, and create a symlink in <em>/usr/local/bin</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ ! -d /usr/local ] && sudo mkdir /usr/local && sudo chgrp admin /usr/local && sudo chmod g+rwx /usr/local
</span><span class='line'>git clone http://git.drupal.org/project/drush.git /usr/local/drush
</span><span class='line'>cd /usr/local/drush
</span><span class='line'>git checkout $(git tag|grep "^[0-9]"|egrep -v "alpha|beta|rc"|tail -1)
</span><span class='line'>cd /usr/local/bin 2&gt;/dev/null || mkdir /usr/local/bin && cd /usr/local/bin
</span><span class='line'>ln -s ../drush/drush || sudo ln -s ../drush/drush</span></code></pre></td></tr></table></div></figure>

<p>To update, fetch the latest code and grab the latest stable tag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /usr/local/drush
</span><span class='line'>git fetch
</span><span class='line'>git checkout $(git tag|grep "^[0-9]"|egrep -v "alpha|beta|rc"|tail -1)</span></code></pre></td></tr></table></div></figure>

<p>If you have any questions or improvements, please leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Never touch your local /etc/hosts file in OS X again]]></title>
    <link href="http://alanthing.com/blog/2012/04/24/never-touch-your-local-etchosts-file-os-x-again/"/>
    <updated>2012-04-24T08:20:00-04:00</updated>
    <id>http://alanthing.com/blog/2012/04/24/never-touch-your-local-etchosts-file-os-x-again</id>
    <content type="html"><![CDATA[<p>In each of my posts on setting up a <a href="http://echodittolabs.org/blog/2012/04/os-x-107-lion-development-nginx-php-mariadb-homebrew">local</a> <a href="http://echodittolabs.org/blog/2011/10/os-x-107-lion-development-macports">development</a> <a href="http://echodittolabs.org/blog/2011/09/os-x-107-lion-development-native-apache-php-homebrew-mysql-or-mariadb">environment</a> <a href="http://echodittolabs.org/blog/2011/08/os-x-107-lion-development-native-mamp-mysql-installer">on OS X</a>, it&#39;s mentioned that you need to add your website&#39;s domain, even though it&#39;s local, in your /etc/hosts file. My preferred way to edit the hosts file on OS X is using <a href="http://code.google.com/p/gmask/">Gas Mask</a>. If you wanted to create the local virtual host <strong>projectx.dev</strong>, you would add the line <code>127.0.0.1 projectx.dev</code> in /etc/hosts or with Gas Mask, and then use that same value in either <strong>ServerName</strong> in Apache or <strong>server_name</strong> in Nginx. This can be tedious for adding new sites. Luckily there&#39;s a way to set this up once and then never have to edit your hosts file again for adding new local virtual hosts.</p>

<p>You&#39;ll need a copy of dnsmasq, and I find this is most easily installed via Homebrew. If you haven&#39;t already, grab either <a href="http://itunes.apple.com/us/app/xcode/id448457090">Xcode</a> or <a href="http://kennethreitz.com/xcode-gcc-and-homebrew.html">Xcode Command Line Tools</a> and <a href="https://github.com/mxcl/homebrew/wiki/installation">install Homebrew</a>.</p>

<p>The steps below will install dnsmasq from Homebrew, configure dnsmasq to return the IP address &#39;127.0.0.1&#39; for all requests to the fake top-level-domain &quot;.dev,&quot; start dnsmasq on boot (don&#39;t worry, it&#39;s an extremely light-weight process), and configure OS X to use dnsmasq for queries ending in &quot;.dev.&quot;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install dnsmasq
</span><span class='line'>mkdir -pv $(brew --prefix)/etc/
</span><span class='line'>echo 'address=/.dev/127.0.0.1' &gt; $(brew --prefix)/etc/dnsmasq.conf
</span><span class='line'>sudo cp -v $(brew --prefix dnsmasq)/homebrew.mxcl.dnsmasq.plist /Library/LaunchDaemons
</span><span class='line'>sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist
</span><span class='line'>sudo mkdir -v /etc/resolver
</span><span class='line'>sudo bash -c 'echo "nameserver 127.0.0.1" &gt; /etc/resolver/dev'</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s it! You can run <code>scutil --dns</code> to show all of your current resolvers, and you should see that all requests for a domain ending in .dev will go to the DNS server at 127.0.0.1:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resolver #9
</span><span class='line'>  domain   : dev
</span><span class='line'>  nameserver[0] : 127.0.0.1</span></code></pre></td></tr></table></div></figure>

<p>If you ping any domain that ends in .dev, you&#39;ll get the IP address 127.0.0.1 back as a result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ping -c 1 thereisnowaythisisarealdomain.dev
</span><span class='line'>PING thereisnowaythisisarealdomain.dev (127.0.0.1): 56 data bytes
</span><span class='line'>64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.057 ms</span></code></pre></td></tr></table></div></figure>

<p>Note that if you&#39;re using Mountain Lion you may need to reboot before the /etc/resolver settings take effect globally. I was able to get pings to work right away but Chrome would not resolve properly until I restarted.</p>

<p>Now you can set up a new virtual host with <strong>anydomain.dev</strong>, and it&#39;ll be available as soon as you reload Apache or Nginx! You could extend this by enabling <a href="http://httpd.apache.org/docs/2.2/vhosts/mass.html">Mass Virtual Hosting for Apache</a> or <a href="http://forum.nginx.org/read.php?2,218617,218617#msg-218617">similar with Nginx</a>, though both require consistent layout of directories. Have fun configuring less stuff on your system!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redirect all port 80 requests to port 8080]]></title>
    <link href="http://alanthing.com/blog/2012/04/23/redirect-all-port-80-requests-port-8080/"/>
    <updated>2012-04-23T09:50:00-04:00</updated>
    <id>http://alanthing.com/blog/2012/04/23/redirect-all-port-80-requests-port-8080</id>
    <content type="html"><![CDATA[<p><a href="http://echodittolabs.org/blog/2012/04/os-x-107-lion-development-nginx-php-mariadb-homebrew">In my previous post</a>, I walked through how to set up a local environment using Nginx running on port 8080 so as to avoid running anything as root or with sudo. Something that I&#39;ve found incredibly annoying is when I forget to specify the port I get an error in my browser, or Chrome might even suggest something based on a search term. It&#39;s fairly easy though to configure Apache to route everything to another port.</p>

<p>Create the file <em>/etc/apache2/other/port8080-redirect.conf</em> as root. It&#39;s probably easiest to hop into Terminal and use nano:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo nano -w /etc/apache2/other/port8080-redirect.conf
</span></code></pre></td></tr></table></div></figure>

<p>Enter the following lines and save and exit the editor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">_default_:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">DocumentRoot</span> <span class="sx">/Library/WebServer/Documents</span>
</span><span class='line'>  <span class="nb">RewriteEngine</span> <span class="k">On</span>
</span><span class='line'>  <span class="c"># Redirect all requests to the local Apache server to port 8080</span>
</span><span class='line'>  <span class="nb">RewriteRule</span> ^.*$ http://%{HTTP_HOST}:8080%{REQUEST_URI}
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Even though the <em>DocumentRoot</em> doesn&#39;t appear to be necessary, I wasn&#39;t able to get this working without it.</p>

<p>Go into System Preferences, open the Sharing preference pane, and check the box for Web Sharing. If you have trouble getting the check to &quot;stick,&quot; you can run the following in Terminal: <code>sudo apachectl restart</code></p>

<p>Now if you go in your browser and hit a domain you have defined in <em>/etc/hosts</em>, like <strong><a href="http://drupal.local/">http://drupal.local/</a></strong>, you&#39;ll automatically be redirected to <strong><a href="http://drupal.local:8080/">http://drupal.local:8080/</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X 10.7 Lion Development: Nginx, PHP, MariaDB with Homebrew]]></title>
    <link href="http://alanthing.com/blog/2012/04/22/os-x-107-lion-development-nginx-php-mariadb-homebrew/"/>
    <updated>2012-04-22T20:41:00-04:00</updated>
    <id>http://alanthing.com/blog/2012/04/22/os-x-107-lion-development-nginx-php-mariadb-homebrew</id>
    <content type="html"><![CDATA[<p><a href="http://wiki.nginx.org">Nginx</a> is quickly becoming a popular, low resource alternative to Apache for many websites. This doesn&#39;t come without challenges, such as using PHP as CGI due to not having mod_php available. Nginx also does not use any Apache configuration rules, nor does it use .htaccess or anything like it, so it requires additional configuration regardless of the web application being deployed. A big help in getting Nginx started with Drupal is <a href="https://github.com/perusio">António P. P. Almeida&#39;s</a> <a href="https://github.com/perusio/drupal-with-nginx/">drupal-with-nginx configuration</a>, which makes it fairly simple to deploy in Linux. But what about local development on OS X? Read on to learn get all of the required components set up for your system, as well as the modifications necessary to get drupal-with-nginx set up on OS X.</p>

<h2 id="toc_0">Prerequisites</h2>

<p>We&#39;ll be building all of our packages with <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, which is, in my opinion, one of the best ways to easily add lot&#39;s of great open-source software on OS X. Homebrew requires that you have a compiler, so you can either install the huge <a href="http://itunes.apple.com/us/app/xcode/id448457090">Xcode package</a>, or I would recommend Apple&#39;s <a href="http://kennethreitz.com/xcode-gcc-and-homebrew.html">Xcode Command Line Tools</a> which is a much smaller download and officially supported by Homebrew.</p>

<p>Once you have either Xcode or Xcode Command Line Tools installed, <a href="https://github.com/mxcl/homebrew/wiki/installation">install Homebrew</a>.</p>

<p>Note that for all commands below that are starting with a <strong>$</strong>, the dollar sign is showing a command-line prompt in <a href="http://www.apple.com/macosx/apps/all.html#terminal">Terminal</a>, and you should not actually type it as part of the commands. I also make heavy use of <code>$(brew --prefix)</code> to make these instructions persist passed current Homebrew formula versions, and hopefully also for an installation with Homebrew in a path other than /usr/local, though I have not tested it.</p>

<p>Also note that many times in this post you will see <strong>/n</strong>; make sure you type those or include them with your copy and paste, they are not CMS errors :)</p>

<h2 id="toc_1">Database: MariaDB</h2>

<p>I&#39;ve <a href="http://echodittolabs.org/blog/2011/09/os-x-107-lion-development-native-apache-php-homebrew-mysql-or-mariadb">covered before why I like MariaDB</a>, but you could easily swap this out with MySQL if you would rather. We&#39;ll start by installing MariaDB with Homebrew.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install mariadb pidof <span class="o">(</span>note: OS X may ask you <span class="k">if </span>you want to install <span class="s1">&#39;javac&#39;</span><span class="o">)</span>
</span><span class='line'><span class="nb">unset </span>TMPDIR
</span><span class='line'>mysql_install_db --verbose --user<span class="o">=</span><span class="sb">`</span>whoami<span class="sb">`</span> --basedir<span class="o">=</span><span class="s2">&quot;$(brew --prefix mariadb)&quot;</span> --datadir<span class="o">=</span><span class="k">$(</span>brew --prefix<span class="k">)</span>/var/mysql --tmpdir<span class="o">=</span>/tmp
</span><span class='line'>cp <span class="k">$(</span>brew --prefix mariadb<span class="k">)</span>/share/mysql/my-small.cnf <span class="k">$(</span>brew --prefix mariadb<span class="k">)</span>/my.cnf
</span><span class='line'>sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;s/max_allowed_packet = 1.*M/max_allowed_packet = 2G/g&#39;</span> <span class="k">$(</span>brew --prefix mariadb<span class="k">)</span>/my.cnf
</span><span class='line'><span class="o">[</span> ! -d ~/Library/LaunchAgents <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir ~/Library/LaunchAgents
</span><span class='line'><span class="o">[</span> -f <span class="k">$(</span>brew --prefix mariadb<span class="k">)</span>/homebrew.mxcl.mariadb.plist <span class="o">]</span> <span class="o">&amp;&amp;</span> cp -v <span class="k">$(</span>brew --prefix mariadb<span class="k">)</span>/homebrew.mxcl.mariadb.plist ~/Library/LaunchAgents/
</span><span class='line'><span class="o">[</span> -f ~/Library/LaunchAgents/homebrew.mxcl.mariadb.plist <span class="o">]</span> <span class="o">&amp;&amp;</span> launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mariadb.plist
</span><span class='line'><span class="k">$(</span>brew --prefix mariadb<span class="k">)</span>/bin/mysql_secure_installation
</span></code></pre></td></tr></table></div></figure>
Note: you could alternatively run: `$(brew &#8211;prefix mariadb)/bin/mysqladmin -u root password &#8216;new-password&#8217;` instead of `mysql_secure_installation`

## PHP

OS X comes with PHP installed, but it doesn&#8217;t come with PHP-FPM. While it&#8217;s likely possible to run PHP as FastCGI with the built-in OS X, I prefer to install PHP with Homebrew since we&#8217;re using Homebrew for everything else, and it keeps everything self-contained in Homebrew&#8217;s root (defaults to /usr/local). Note that the `brew tap` command requires [Homebrew 0.9 or greater](https://github.com/mxcl/homebrew/wiki/Homebrew-0.9).

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew tap josegonzalez/php
</span><span class='line'>brew install php --with-mariadb --with-suhosin --with-fpm
</span><span class='line'>mkdir -v <span class="k">$(</span>brew --prefix php<span class="k">)</span>/var/log
</span><span class='line'>cp -v <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php-fpm.conf.default <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php-fpm.conf
</span><span class='line'>sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s|;\(daemonize[[:space:]]*=[[:space:]]*\)yes|\1no|g&#39;</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php-fpm.conf
</span><span class='line'><span class="o">[</span> ! -d ~/Library/LaunchAgents <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir ~/Library/LaunchAgents
</span><span class='line'><span class="o">[</span> -f <span class="k">$(</span>brew --prefix php<span class="k">)</span>/org.php-fpm.plist <span class="o">]</span> <span class="o">&amp;&amp;</span> cp -v <span class="k">$(</span>brew --prefix php<span class="k">)</span>/org.php-fpm.plist ~/Library/LaunchAgents/
</span><span class='line'><span class="o">[</span> -f ~/Library/LaunchAgents/org.php-fpm.plist <span class="o">]</span> <span class="o">&amp;&amp;</span> launchctl load -w ~/Library/LaunchAgents/org.php-fpm.plist
</span></code></pre></td></tr></table></div></figure>

<p>I would recommend the following settings for full compatibility with drupal-with-nginx, and to set the time zone to silence a lot of PHP warnings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s|;\(pm.status_path[[:space:]]*=[[:space:]]*/\)\(status\)|\1fpm-\2|g&#39;</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php-fpm.conf
</span><span class='line'>sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s|;\(ping.path[[:space:]]*=[[:space:]]*/ping\)|\1|g&#39;</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php-fpm.conf
</span><span class='line'>sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s|;\(ping.response[[:space:]]*=[[:space:]]*pong\)|\1|g&#39;</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php-fpm.conf
</span><span class='line'>sed -i <span class="s1">&#39;&#39;</span> <span class="s2">&quot;s|;\(date\.timezone[[:space:]]*=\).*|\1 $(php -d &#39;error_reporting=&#39; -r &#39;echo date(&quot;</span>e<span class="s2">&quot;, time());&#39;)|g&quot;</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php.ini
</span></code></pre></td></tr></table></div></figure>

<p>By default, PHP-FPM runs on a socket, which means that connections to PHP-FPM will require using TCP. You also have the option to use Unix sockets, which means slightly less overhead in PHP-FPM connections. Note that the drupal-with-nginx repository is set up for TCP by default, though if you choose to run the following command I will tell you how to use Unix sockets with Nginx.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s|\(listen[[:space:]]*=[[:space:]]*\)127.0.0.1:9000|\1var/www.sock|g&#39;</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php-fpm.conf
</span></code></pre></td></tr></table></div></figure>

<h3 id="toc_2">Optional: PHP Extensions</h3>

<p>The <a href="https://github.com/josegonzalez/homebrew-php">third-party Homebrew keg that we &quot;tapped&quot; into</a> also provides easy formulas for PHP extensions. None of these are required to run Nginx and Drupal locally. You may also note that <em>uploadprogress</em> does not work with anything but mod_php, but by installing it now you could theoretically use the same PHP installation with Apache if you wanted and already have it ready to go. Feel free to omit it, or any of these below, though I would at least recommend APC for performance reasons.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install uploadprogress-php
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\n[uploadprogress]\nextension=\&quot;$(brew --prefix uploadprogress-php)/uploadprogress.so\&quot;&quot;</span> &gt;&gt; <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php.ini
</span><span class='line'>brew install apc-php
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\n[apc]\nextension=\&quot;$(brew --prefix apc-php)/apc.so\&quot;\napc.enabled=1 \napc.shm_segments=1 \napc.shm_size=64M \napc.ttl=7200 \napc.user_ttl=7200 \napc.num_files_hint=1024 \napc.mmap_file_mask=/tmp/apc.XXXXXX \napc.enable_cli=1&quot;</span> &gt;&gt; <span class="k">$(</span>brew --prefix<span class="k">)</span>/php.ini
</span><span class='line'>brew install memcache-php
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\n[memcache]\nextension=\&quot;$(brew --prefix memcache-php)/memcache.so\&quot;&quot;</span> &gt;&gt; <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php.ini
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;memcache.hash_strategy=\&quot;consistent\&quot;&quot;</span> &gt;&gt; <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php.ini
</span><span class='line'>brew install xdebug-php
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\n[xdebug]\nzend_extension=\&quot;$(brew --prefix xdebug-php)/xdebug.so\&quot;&quot;</span> &gt;&gt; <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php.ini
</span><span class='line'>brew install xhprof-php
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\n[xhprof]\nextension=\&quot;$(brew --prefix xhprof-php)/xhprof.so\&quot;&quot;</span> &gt;&gt; <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/php.ini
</span></code></pre></td></tr></table></div></figure>

<p>Once you&#39;ve finished configuring PHP, you can reload the settings for PHP-FPM (or, you could find the pid of the first php-fpm process and send it the SIGUSR2 signal; this is easier):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span> -f ~/Library/LaunchAgents/org.php-fpm.plist <span class="o">]</span> <span class="o">&amp;&amp;</span> launchctl unload -w ~/Library/LaunchAgents/org.php-fpm.plist <span class="o">&amp;&amp;</span> launchctl load -w ~/Library/LaunchAgents/org.php-fpm.plist
</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_3">Nginx</h2>

<p>After compiling MariaDB and PHP, you&#39;re probably not too excited about compiling another application. Luckily, Nginx is a faily quick build, at least compared to MariaDB and PHP. We&#39;ll include some build options not on by default since they add features references in drupal-with-nginx, and we&#39;ll also add some 3rd party extensions as well. We&#39;ll start by grabbing those extensions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -s -L -o /tmp/nginx-upload-progress.tar.gz https://github.com/masterzen/nginx-upload-progress-module/tarball/v0.9.0 <span class="o">&amp;&amp;</span> mkdir /tmp/nginx-upload-progress <span class="o">&amp;&amp;</span> tar zxpf /tmp/nginx-upload-progress.tar.gz --strip-components 1 -C /tmp/nginx-upload-progress <span class="o">&amp;&amp;</span> rm /tmp/nginx-upload-progress.tar.gz
</span><span class='line'>curl -s -L -o /tmp/nginx-fair.tar.gz http://github.com/gnosek/nginx-upstream-fair/tarball/master <span class="o">&amp;&amp;</span> mkdir /tmp/nginx-fair <span class="o">&amp;&amp;</span> tar zxpf /tmp/nginx-fair.tar.gz --strip-components 1 -C /tmp/nginx-fair <span class="o">&amp;&amp;</span> rm /tmp/nginx-fair.tar.gz
</span></code></pre></td></tr></table></div></figure>

<p>The next section is one giant line of sed regex that will edit the Homebrew formula for nginx to add the additional compile options that we need. Make sure it all gets entered as one line (yes, you should use copy and paste here)!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -i <span class="s1">&#39;-default&#39;</span> <span class="s1">&#39;s/\([[:space:]]*\[&#39;</span><span class="se">\&#39;</span><span class="s1">&#39;--\)\(with-webdav\)\(&#39;</span><span class="se">\&#39;</span><span class="s1">&#39;,[[:space:]]*&quot;\)\(Compile with support for WebDAV module\)\(&quot;\]\)/\1\2\3\4\5,%\1with-realip\3Compile with support for RealIP module\5,%\1with-gzip_static\3Compile with support for Gzip Static module\5,%\1with-uploadprogress\3Compile with support for Upload Progress module\5,%\1with-fair\3Compile with support for Fair module\5,%\1with-mp4\3Compile with support for MP4 module\5,%\1with-flv\3Compile with support for FLV module\5,%\1with-stub_status\3Compile with support for Stub Status module\5/; s/\([[:space:]]* args &lt;&lt; &quot;--\)\(with-http_dav_module\)\(&quot; if ARGV.include? &#39;</span><span class="se">\&#39;</span><span class="s1">&#39;--with-\)\(webdav\)\(&#39;</span><span class="se">\&#39;</span><span class="s1">&#39;.*\)/\1\2\3\4\5%\1with-http_realip_module\3realip\5%\1with-http_gzip_static_module\3gzip_static\5%\1add-module=\/tmp\/nginx-upload-progress\3uploadprogress\5%\1add-module=\/tmp\/nginx-fair\3fair\5%\1with-http_mp4_module\3mp4\5%\1with-http_flv_module\3flv\5%\1with-http_stub_status_module\3stub_status\5/; y/%/\n/&#39;</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/Library/Formula/nginx.rb
</span></code></pre></td></tr></table></div></figure>

<p>Now we&#39;ll install Nginx with our new build options and extensions and start it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install nginx --with-realip --with-gzip_static --with-mp4 --with-flv --with-stub_status --with-uploadprogress --with-fair
</span><span class='line'><span class="o">[</span> <span class="nv">$?</span> -eq 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> rm -rf /tmp/nginx-upload-progress /tmp/nginx-fair
</span><span class='line'>mkdir -vp <span class="k">$(</span>brew --prefix nginx<span class="k">)</span>/var/<span class="o">{</span>microcache,log,run<span class="o">}</span>
</span><span class='line'><span class="o">[</span> ! -d ~/Library/LaunchAgents <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir ~/Library/LaunchAgents
</span><span class='line'><span class="o">[</span> -f <span class="k">$(</span>brew --prefix nginx<span class="k">)</span>/homebrew.mxcl.nginx.plist <span class="o">]</span> <span class="o">&amp;&amp;</span> cp -v <span class="k">$(</span>brew --prefix nginx<span class="k">)</span>/homebrew.mxcl.nginx.plist ~/Library/LaunchAgents/
</span><span class='line'><span class="o">[</span> -f ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist <span class="o">]</span> <span class="o">&amp;&amp;</span> launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist
</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_4">Nginx-With-Drupal</h2>

<p>We&#39;re now ready to set up Nginx to work with Drupal. <a href="https://github.com/alanthing/drupal-with-nginx/tree/osx-1.0.x">I&#39;ve created a fork of the original repository</a> to make some necessary changes for OS X. I also make several changes for the stable 1.0.x branch of Nginx, which we&#39;ve just installed, rather than the unstable 1.1.x branch that is in the original configuration.</p>

<p>If you want to stick with the original project, <a href="https://github.com/alanthing/drupal-with-nginx/commit/f13f7d8ce9af0853a5601dcbb90c5e0c2ed8dadd">check out the changes I made for OS X and 1.0.x</a> and you can apply them yourself and skip the git steps below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span> -d <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/nginx <span class="o">]</span> <span class="o">&amp;&amp;</span> mv -v <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/nginx <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/nginx-default
</span><span class='line'>git clone https://github.com/alanthing/drupal-with-nginx.git <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/nginx
</span><span class='line'><span class="nb">cd</span> <span class="k">$(</span>brew --prefix<span class="k">)</span>/etc/nginx
</span><span class='line'>git checkout osx-1.0.x
</span><span class='line'>mkdir sites-enabled
</span><span class='line'><span class="nb">cd </span>sites-enabled
</span><span class='line'>ln -s ../sites-available/000-default
</span><span class='line'>cp -a ../sites-available/example.com.conf yournewsite.conf
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s about as much as I can automate for you with copy+paste-able commands! You&#39;ll want to do the following to <em>yournewsite</em>.conf, which you can rename to be anything, to configure Nginx for your website:</p>

<ul>
<li>  Change <code>server_name</code>, <code>access_log</code>, and <code>error_log</code> to use your local domain name for your virtual host</li>
<li>  Change root to the path of your Drupal installation. On my system, this may be <em>/Users/alan/Sites/drupal-7.14</em>. Note that you cannot use <em>~</em> in place of <em>/Users/name</em></li>
<li>  Unless you have a valid SSL certificate, you&#39;ll probably want to completely delete the second half of the file. So find the line containing <code>} HTTP server</code> and remove all following lines</li>
<li>  If you&#39;re using Boost with Drupal 7, or Drupal 6 with/without Boost, note that you&#39;ll want to comment out the <code>include sites-available/drupal.conf</code> line and uncomment the other relevant one for your site</li>
<li>  If you want to get additional status messages from PHP-FPM, uncomment <code>include php_fpm_status_vhost.conf</code> in this file, and also <code>include php_fpm_status_allowed_hosts.conf</code> in <code>$(brew --prefix)/etc/nginx/nginx.conf</code></li>
<li>  If you configured PHP-FPM earlier to use Unix sockets instead of TCP, open nginx.conf and comment out <code>include upstream_phpcgi_tcp.conf</code> and uncomment <code>include upstream_phpcgi_unix.conf</code></li>
<li>  Depending on the location of your files directory, you may need to edit the <code>sites-available/drupal.conf</code> (or other drupal*.conf) file and change the relevant sites/default/files paths appropriately</li>
</ul>

<p>Once you&#39;re finished editing your virtual host conf file (and possibly nginx.conf), you can reload nginx easily:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">$(</span>brew --prefix<span class="k">)</span>/sbin/nginx -s reload
</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_5">Bonus: Drush</h2>

<p>You&#39;ll need Drush to install a new Drupal site, as install.php is blocked for security reasons by default. Also, you&#39;ll find cron.php is inaccessible as well. There&#39;s a weird little hack required to get Drush installed with Homebrew without requiring sudo, so below is an example of how to both get around the sudo requirement and set up a blank Drupal 7 website (note that using the root MySQL user is bad form, but this is meant more as a quick demo of using drush with this setup than a recommended setup).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>touch <span class="k">$(</span>brew --prefix php<span class="k">)</span>/lib/php/.lock
</span><span class='line'>chmod 0644 <span class="k">$(</span>brew --prefix php<span class="k">)</span>/lib/php/.lock
</span><span class='line'><span class="k">$(</span>brew --prefix<span class="k">)</span>/bin/pear channel-discover pear.drush.org
</span><span class='line'><span class="k">$(</span>brew --prefix<span class="k">)</span>/bin/pear install drush/drush
</span><span class='line'>brew unlink php <span class="o">&amp;&amp;</span> brew link php
</span><span class='line'><span class="nb">cd</span> ~/Sites 2&gt;/dev/null <span class="o">||</span> mkdir ~/Sites <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ~/Sites
</span><span class='line'>drush dl
</span><span class='line'>mysql -uroot -p<span class="s1">&#39;yourpassword&#39;</span> -e<span class="s1">&#39;create database drupal;&#39;</span>
</span><span class='line'><span class="nb">cd </span>drupal-7.14
</span><span class='line'>drush si --db-url<span class="o">=</span>mysql://root:yourpassword@localhost/drupal
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js and NPM on CentOS]]></title>
    <link href="http://alanthing.com/blog/2012/02/10/nodejs-and-npm-centos/"/>
    <updated>2012-02-10T17:23:00-05:00</updated>
    <id>http://alanthing.com/blog/2012/02/10/nodejs-and-npm-centos</id>
    <content type="html"><![CDATA[<p><strong><em>Update:</em> This no longer appears to be necessary as of nodejs 0.8.0.</strong> It may have been fixed earlier but I noticed neither of these changes are necessary anymore. Something new though, I had problems with node-gyp, and the solution was to install python26 with yum and then re-run the npm command with <code>PYTHON=&quot;/usr/bin/python26&quot; npm install -deps</code> or similar.</p>

<p>The preferred way to install node and NPM seems to be installing from source, but I&#39;m a perennial fan of using packages to keep things tidy, especially if I need to uninstall something. I started by going to the <a href="http://nodejs.org/#download">Node.js download page</a>, and through to <a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager">Installing with a package manager</a>. I installed the yum release RPM for the <a href="http://nodejs.tchol.org/">tchol.org</a> repository as directed and installed <strong>nodejs</strong> and <strong>npm</strong> with yum. From there, I ran into two problems but thankfully they were fairly easy to resolve.</p>

<p>The first thing I wanted to do was install <a href="https://github.com/nodejitsu/forever">forever</a> globally so I could use it to keep applications running persistently. But running <code>npm install forever -g</code> kept stalling. The npm RPM installed from the tchol.org repository creates the symlink /usr/lib/node_modules to /usr/lib/nodejs. That&#39;s fine, but /usr/lib/nodejs is owned by root:root. Running a npm install command with sudo attempted to set the ownership of the NPM modules as nobody:user, and NPM wasn&#39;t exiting due to permissions for some reason.</p>

<p>I have ACLs enabled on my file system, so I fixed this by allowing nobody write access to /usr/lib/nodejs:</p>
<div class="highlight"><pre><code class="text">sudo setfacl -m u:nobody:rwx /usr/lib/nodejs
</code></pre></div>
<p>If you don&#39;t have ACLs enabled on your filesystem, you could allow nobody to be the folder owner:</p>
<div class="highlight"><pre><code class="text">sudo chown nobody:nobody /usr/lib/nodejs
</code></pre></div>
<p>The second problem I ran into was, after installing forever, it wouldn&#39;t run. The nodejs package installed the binary as /usr/bin/nodejs but /usr/bin/forever begins with <strong>#!/usr/bin/env node</strong>, which will not return a valid interpreter. I wanted to install a symlink into /usr/local/bin, but some users don&#39;t always have that in their path, so I created a link via:</p>
<div class="highlight"><pre><code class="text">sudo ln -s /usr/bin/nodejs /usr/bin/node
</code></pre></div>
<p>Now I&#39;m able to install anything I need to with NPM and run my Node.js applications with Forever. I&#39;m still very new to Node, so if you think I should be doing things a better way, let me know in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X 10.7 Lion Development: MacPorts]]></title>
    <link href="http://alanthing.com/blog/2011/10/11/os-x-107-lion-development-macports/"/>
    <updated>2011-10-11T14:13:00-04:00</updated>
    <id>http://alanthing.com/blog/2011/10/11/os-x-107-lion-development-macports</id>
    <content type="html"><![CDATA[<p>OS X Lion comes with most of the tools you would need to do &quot;MAMP&quot; (Mac OS X, Apache, MySQL/MariaDB, PHP) development, as outlined in my <a href="http://echodittolabs.org/blog/2011/08/os-x-107-lion-development-native-mamp-mysql-installer">previous</a> <a href="http://echodittolabs.org/blog/2011/09/os-x-107-lion-development-native-apache-php-homebrew-mysql-or-mariadb">posts</a> once you add a database. So then why would you want to use MacPorts? Setting your development environment up in MacPorts isolates the binaries, libraries, and configuration files, completely separate from the existing OS X install (with the exception of startup scripts). You can also tweak the configuration files on your own, apply your own patches, and apply updates that MacPorts may get before Apple pushes them. It will take more time because you&#39;ll be compiling everything, but you have all of the control. Read on for how to get things set up. </p>

<h2 id="toc_0">Prerequisites</h2>

<p>We&#39;ll going to be compiling a lot of source code so you&#39;ll need to have <a href="http://itunes.apple.com/us/app/xcode/id448457090">Xcode 4</a> installed. I initially tried with the <a href="https://github.com/kennethreitz/osx-gcc-installer">OS X GCC Installer</a> but eventually ran into a problem where a portfile was expecting an Xcode binary to check to a prerequisite. I&#39;m sure some hacking could&#39;ve resolved it to avoid having to install the very large Xcode package, but at the end of the day it&#39;s better to just know that it&#39;ll work as expected. </p>

<p>Once you have Xcode 4 installed, you&#39;ll need to <a href="http://www.macports.org/install.php">install MacPorts</a>. It&#39;s a simple click-through installer. Come back to this guide once MacPorts is ready. </p>

<p>Note that for all commands before that are starting with a $, the dollar sign is showing a command-line prompt in <a href="http://www.apple.com/macosx/apps/all.html#terminal">Terminal</a>, and you should not actually type it as part of the commands. </p>

<h2 id="toc_1">Install packages</h2>

<p>Update the ports tree to get the latest from the MacPorts server in case the installer had an older tree:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /opt/local/bin/port selfupdate
</span></code></pre></td></tr></table></div></figure>

<p>All of the packages that we need can be installed with a single command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /opt/local/bin/port install apache2 php5 php5-mysql mysql5-server php5-gd php5-mbstring php5-apc lynx phpmyadmin
</span></code></pre></td></tr></table></div></figure>

<p>Compiling all of these tools will take a while, so grab a book and come back when the command is completed. </p>

<h2 id="toc_2">Configure PHP</h2>

<p>The following will set up PHP with some development-friendly settings. </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo cp -av /opt/local/etc/php5/php.ini-development /opt/local/etc/php5/php.ini
</span><span class='line'><span class="nv">$ </span>sudo sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;s/\(default_socket[ ]\{0,1\}=\)/\1 \/opt\/local\/var\/run\/mysql5\/mysqld.sock/g&#39;</span> /opt/local/etc/php5/php.ini
</span><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;cat &gt;&gt; /opt/local/etc/php5/php.ini &lt;&lt;&#39;EOF&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s2">;;</span>
</span><span class='line'><span class="s2">;; User customizations below</span>
</span><span class='line'><span class="s2">;;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">; Original - memory_limit = 128M</span>
</span><span class='line'><span class="s2">memory_limit = 196M</span>
</span><span class='line'><span class="s2">; Original - post_max_size = 8M</span>
</span><span class='line'><span class="s2">post_max_size = 200M</span>
</span><span class='line'><span class="s2">; Original - upload_max_filesize = 2M</span>
</span><span class='line'><span class="s2">upload_max_filesize = 100M</span>
</span><span class='line'><span class="s2">; Original - default_socket_timeout = 60</span>
</span><span class='line'><span class="s2">default_socket_timeout = 600</span>
</span><span class='line'><span class="s2">; Original - max_execution_time = 30</span>
</span><span class='line'><span class="s2">max_execution_time = 300</span>
</span><span class='line'><span class="s2">; Original - max_input_time = 60</span>
</span><span class='line'><span class="s2">max_input_time = 600</span>
</span><span class='line'><span class="s2">; Original - ;date.timezone =</span>
</span><span class='line'><span class="s2">date.timezone = &#39;America/New_York&#39;</span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now configure the APC extension (installed above with php5-apc) which will increase PHP performance dramatically.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;cat &gt; /opt/local/var/db/php5/apc-config.ini &lt;&lt;&#39;EOF&#39;</span>
</span><span class='line'><span class="s2">[apc]</span>
</span><span class='line'><span class="s2">apc.enabled = 1</span>
</span><span class='line'><span class="s2">apc.shm_segments = 1</span>
</span><span class='line'><span class="s2">apc.shm_size = 96M</span>
</span><span class='line'><span class="s2">apc.cache_by_default = 1</span>
</span><span class='line'><span class="s2">apc.stat = 1</span>
</span><span class='line'><span class="s2">apc.rfc1867 = 1</span>
</span><span class='line'><span class="s2">apc.stat = 7200</span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_3">Configure Apache</h2>

<p>Start by setting up PHP to work with Apache properly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo cp -av /opt/local/apache2/conf/httpd.conf /opt/local/apache2/conf/httpd.conf-default
</span><span class='line'><span class="nv">$ </span>sudo /opt/local/apache2/bin/apxs -a -e -n <span class="s2">&quot;php5&quot;</span> /opt/local/apache2/modules/libphp5.so
</span><span class='line'><span class="nv">$ </span>sudo bash -c <span class="s2">&quot;cat &gt;&gt; /opt/local/apache2/conf/httpd.conf &lt;&lt;&#39;EOF&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">## Add mod_php information</span>
</span><span class='line'><span class="s2">Include conf/extra/mod_php.conf</span>
</span><span class='line'><span class="s2"># Add index.php to the list of files that will be served as directory indexes.</span>
</span><span class='line'><span class="s2">&lt;IfModule dir_module&gt;</span>
</span><span class='line'><span class="s2">  DirectoryIndex index.php index.html</span>
</span><span class='line'><span class="s2">&lt;/IfModule&gt;</span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we&#39;ll move httpd-vhosts.conf to ~/Sites for easy editing of new virtual hosts, as well as create a ~/Sites/logs folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo mv -v /opt/local/apache2/conf/extra/httpd-vhosts.conf /opt/local/apache2/conf/extra/httpd-vhosts.conf-default &lt;/br&gt;
</span><span class='line'><span class="nv">$ </span><span class="o">[</span> ! -d ~/Sites <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir -v ~/Sites
</span><span class='line'><span class="nv">$ </span>cp -av /opt/local/apache2/conf/extra/httpd-vhosts.conf-default ~/Sites/httpd-vhosts.conf
</span><span class='line'><span class="nv">$ </span>sudo ln -s ~/Sites/httpd-vhosts.conf /opt/local/apache2/conf/extra/httpd-vhosts.conf
</span><span class='line'><span class="nv">$ </span>sudo sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;s/\#\(.*httpd-vhosts\.conf\)/\1/&#39;</span> /opt/local/apache2/conf/httpd.conf
</span><span class='line'><span class="nv">$ </span><span class="o">[</span> ! -d ~/Sites/logs <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir ~/Sites/logs
</span><span class='line'><span class="nv">$ </span>sudo perl -pi -e <span class="s1">&#39;BEGIN{undef $/;} s/\&lt;VirtualHost .*\n//sg;&#39;</span> <span class="k">${</span><span class="nv">USERHOME</span><span class="k">}</span>/Sites/httpd-vhosts.conf &lt;/br&gt;
</span><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;cat &gt;&gt; ~/Sites/httpd-vhosts.conf &lt;&lt;&#39;EOF&#39; &lt;/br&gt;</span>
</span><span class='line'><span class="s2"> &lt;/br&gt;</span>
</span><span class='line'><span class="s2">## Change /Users/name to the path of your home folder &lt;/br&gt;</span>
</span><span class='line'><span class="s2">#&lt;VirtualHost *:80&gt; &lt;/br&gt;</span>
</span><span class='line'><span class="s2">#  ServerName project.local &lt;/br&gt;</span>
</span><span class='line'><span class="s2">#  CustomLog &quot;</span>/Users/name/Sites/logs/project.local-access_log<span class="s2">&quot; combined &lt;/br&gt;</span>
</span><span class='line'><span class="s2">#  ErrorLog &quot;</span>/Users/name/Sites/logs/project.local-error_log<span class="s2">&quot; &lt;/br&gt;</span>
</span><span class='line'><span class="s2">#  DocumentRoot &quot;</span>/Users/name/Sites/project.local<span class="s2">&quot; &lt;/br&gt;</span>
</span><span class='line'><span class="s2">#&lt;/VirtualHost&gt; &lt;/br&gt;</span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Allow userdirs so the MacPorts Apache &quot;feels&quot; more like the built-in Apache:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;s/\#\(.*httpd-userdir\.conf\)/\1/&#39;</span> /opt/local/apache2/conf/httpd.conf
</span></code></pre></td></tr></table></div></figure>

<p>Start Apache and set it to load on boot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /opt/local/bin/port load apache2
</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_4">Configure MySQL</h2>

<p>Set up the configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp -av /opt/local/share/mysql5/mysql/my-small.cnf /opt/local/etc/mysql5/my.cnf
</span><span class='line'>sudo sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;s/max_allowed_packet = 1.*M/max_allowed_packet = 1G/g&#39;</span> /opt/local/etc/mysql5/my.cnf
</span></code></pre></td></tr></table></div></figure>

<p>Initialize MySQL and run the secure installation script:<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo -u _mysql /opt/local/bin/mysql_install_db5<br>
</span><span class='line'>sudo /opt/local/bin/port load mysql5-server<br>
</span><span class='line'>sudo /opt/local/lib/mysql5/bin/mysql_secure_installation<br>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="toc_5">Configure phpMyAdmin</h2>

<p>Add a config file for Apache and reload Apache:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;cat &gt;&gt; /opt/local/apache2/conf/httpd.conf &lt;&lt;&#39;EOF&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2"># phpMyAdmin</span>
</span><span class='line'><span class="s2">Include conf/extra/phpmyadmin.conf</span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;cat &gt;&gt; /opt/local/apache2/conf/extra/phpmyadmin.conf &lt;&lt;&#39;EOF&#39;</span>
</span><span class='line'><span class="s2">AliasMatch ^/phpmyadmin(?:/)?(/.*)?$ /opt/local/www/phpmyadmin$1</span>
</span><span class='line'><span class="s2">AliasMatch ^/phpMyAdmin(?:/)?(/.*)?$ /opt/local/www/phpmyadmin$1</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;Directory &quot;</span>/opt/local/www/phpmyadmin<span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2"> Options -Indexes</span>
</span><span class='line'><span class="s2"> AllowOverride None</span>
</span><span class='line'><span class="s2"> Order allow,deny</span>
</span><span class='line'><span class="s2"> Allow from all</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> LanguagePriority en de es fr ja ko pt-br ru</span>
</span><span class='line'><span class="s2"> ForceLanguagePriority Prefer Fallback</span>
</span><span class='line'><span class="s2">&lt;/Directory&gt;</span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span><span class='line'><span class="nv">$ </span>sudo /opt/local/bin/port unload apache2
</span><span class='line'><span class="nv">$ </span>sudo /opt/local/bin/port load apache2
</span></code></pre></td></tr></table></div></figure>

<p>Basic set up of phpMyAdmin:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo sed -i <span class="s2">&quot;&quot;</span> <span class="s2">&quot;s/blowfish_secret\&#39;\] = \&#39;/blowfish_secret\&#39;\] = \&#39;`cat /dev/urandom | strings | grep -o &#39;[[:alnum:]]&#39; | head -n 50 | tr -d &#39;\n&#39;`/&quot;</span> /opt/local/www/phpmyadmin/config.inc.php
</span><span class='line'>sudo /opt/local/bin/mysql5 -uroot -proot &lt; /opt/local/www/phpmyadmin/scripts/create_tables.sql
</span><span class='line'>sudo /opt/local/bin/mysql5 -uroot -proot -e<span class="s2">&quot;CREATE USER &#39;pma&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;pmapass&#39;; GRANT SELECT, INSERT, DELETE, UPDATE ON phpmyadmin.* TO pma@localhost;&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_6">Hooray!</h2>

<p>Now you can edit ~/Sites/httpd-vhosts.conf and add a new virtual host. You&#39;d need to reload Apache after doing so by running <code>sudo port unload apache2 &amp;&amp; sudo port load apache2</code>. phpMyAdmin or the mysql5 binary should provide you a way to create new databases and database users and you can then set up a local site.</p>

<p>If you find MacPorts too heavy a separation from OSX, or too slow to compile, you should check out my previous blog posts on setting up a MAMP environment with as many built-in tools as possible only by adding a <a href="http://echodittolabs.org/blog/2011/08/os-x-107-lion-development-native-mamp-mysql-installer">MySQL installer</a> or <a href="http://echodittolabs.org/blog/2011/09/os-x-107-lion-development-native-apache-php-homebrew-mysql-or-mariadb">MySQL/MariaDB via Homebrew</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X 10.7 Lion Development: Native Apache & PHP with Homebrew MySQL or MariaDB]]></title>
    <link href="http://alanthing.com/blog/2011/09/07/os-x-107-lion-development-native-apache-php-homebrew-mysql-or-mariadb/"/>
    <updated>2011-09-07T17:45:00-04:00</updated>
    <id>http://alanthing.com/blog/2011/09/07/os-x-107-lion-development-native-apache-php-homebrew-mysql-or-mariadb</id>
    <content type="html"><![CDATA[<p>OS X Lion ships with Apache and PHP, which both require a little bit of tweaking to get fully-functional for &quot;MAMP&quot; local development. The one thing Lion does not ship with is a database. This will be very similar to my <a href="http://echodittolabs.org/blog/2011/08/os-x-107-lion-development-native-mamp-mysql-installer">previous post on local development</a> but this time we&#39;ll be using Homebrew to install either MySQL or MariaDB for the database. Since we&#39;ll be using a compiler for Homebrew, I&#39;ll also cover how to add APC and other PECL modules that you can add to OS X. </p>

<p>Note that for all commands before that are starting with a $, the dollar sign is showing a command-line prompt in <a href="http://www.apple.com/macosx/apps/all.html#terminal">Terminal</a>, and you should not actually type it as part of the commands.</p>

<h2 id="toc_0">Apache</h2>

<p>We&#39;ll set things up so we won&#39;t need sudo often in the future, and so we can manage multiple VirtualHosts. We&#39;ll keep the Apache information and our website roots in ~/Sites, and Apache logs in ~/Sites/logs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span> ! -d ~/Sites <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir ~/Sites
</span><span class='line'>touch ~/Sites/httpd-vhosts.conf
</span><span class='line'>sudo ln -s ~/Sites/httpd-vhosts.conf /etc/apache2/other
</span><span class='line'>mkdir ~/Sites/logs
</span><span class='line'>chmod 0777 ~/Sites/logs
</span></code></pre></td></tr></table></div></figure>

<p>Edit the new <strong>~/Sites/httpd-vhosts.conf</strong> file and add the following. Note that you&#39;ll need to change all instances of &quot;/Users/name&quot; to your actual home folder path.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># Use name-based virtual hosting. </span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="nb">NameVirtualHost</span> *:80
</span><span class='line'>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># Set up permissions for VirtualHosts in ~/Sites </span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="nt">&lt;Directory</span> <span class="s">&quot;/Users/name/Sites&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> Indexes FollowSymLinks MultiViews
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">All</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'><span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For http://localhost in the OS X default location </span>
</span><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">_default_:80</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">ServerName</span> localhost
</span><span class='line'>    <span class="nb">DocumentRoot</span> <span class="sx">/Library/WebServer/Documents</span>
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># VirtualHosts below </span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'>
</span><span class='line'><span class="c">## Template </span>
</span><span class='line'><span class="c">#&lt;VirtualHost *:80&gt; </span>
</span><span class='line'><span class="c">#    ServerName domain.local </span>
</span><span class='line'><span class="c">#    CustomLog &quot;/Users/name/Sites/logs/domain.local-access_log&quot; combined </span>
</span><span class='line'><span class="c">#    ErrorLog &quot;/Users/name/Sites/logs/domain.local-error_log&quot; </span>
</span><span class='line'><span class="c">#    DocumentRoot &quot;/Users/name/Sites/domain.local&quot; </span>
</span><span class='line'><span class="c">#&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Launch <strong>System Preferences</strong> and go to <strong>Sharing</strong> and toggle <strong>Web Sharing</strong> off and on so it&#39;s started and reloaded with the new settings. Then click on the blue underlined link under <em>&quot;Your computer&#39;s website is available at this address:&quot;</em> to ensure Apache is working correctly, and you should see text saying &quot;It works!&quot;</p>

<p>To add a site, duplicate the &lt;VirtualHost&gt; section under the Template, remove the comments, and edit appropriately. Edit /etc/hosts (or use <a href="http://code.google.com/p/gmask/">Gas Mask</a>) and add an entry for 127.0.0.1 for your project.local, and make the appropriate change in the conf file, along with the correct DocumentRoot and Log file locations. See <a href="http://httpd.apache.org/docs/2.2/vhosts/name-based.html">Apache&#39;s documentation</a> for more information.</p>

<h2 id="toc_1">PHP</h2>

<p>OS X has shipped with PHP for quite some time, but not had it enabled by default. We&#39;ll enable mod_php for Apache, and also set up an /etc/php.ini file based on the default one shipped with Lion with some development-friendly changes. Change your timezone as needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;grep php /etc/apache2/httpd.conf|grep LoadModule|cut -d&#39;#&#39; -f2 &gt; /etc/apache2/other/php5-loadmodule.conf&quot;</span>
</span><span class='line'><span class="nv">$ </span>sudo cp -a /etc/php.ini.default /etc/php.ini
</span><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;cat &gt;&gt; /etc/php.ini &lt;&lt;&#39;EOF&#39; </span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s2">;; </span>
</span><span class='line'><span class="s2">;; User customizations below </span>
</span><span class='line'><span class="s2">;; </span>
</span><span class='line'>
</span><span class='line'><span class="s2">; Original - memory_limit = 128M </span>
</span><span class='line'><span class="s2">memory_limit = 196M </span>
</span><span class='line'><span class="s2">; Original - post_max_size = 8M </span>
</span><span class='line'><span class="s2">post_max_size = 200M </span>
</span><span class='line'><span class="s2">; Original - upload_max_filesize = 2M </span>
</span><span class='line'><span class="s2">upload_max_filesize = 100M </span>
</span><span class='line'><span class="s2">; Original - default_socket_timeout = 60 </span>
</span><span class='line'><span class="s2">default_socket_timeout = 600 </span>
</span><span class='line'><span class="s2">; Original - max_execution_time = 30 </span>
</span><span class='line'><span class="s2">max_execution_time = 300 </span>
</span><span class='line'><span class="s2">; Original - max_input_time = 60 </span>
</span><span class='line'><span class="s2">max_input_time = 600 </span>
</span><span class='line'><span class="s2">; Original - display_errors = Off </span>
</span><span class='line'><span class="s2">display_errors = on </span>
</span><span class='line'><span class="s2">; Original - display_startup_errors = Off </span>
</span><span class='line'><span class="s2">display_startup_errors = on </span>
</span><span class='line'><span class="s2">; Original - ;date.timezone = </span>
</span><span class='line'><span class="s2">date.timezone = &#39;America/New_York&#39; </span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>Optional:</strong> Lion ships with PEAR but not installed, whereas Snow Leopard it was installed. This will install PEAR from the phar archive, upgrade it, and add &#39;pear&#39; and &#39;pecl&#39; aliases to your shell.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /usr/bin/php /usr/lib/php/install-pear-nozlib.phar
</span><span class='line'><span class="nv">$ </span>cat &gt;&gt; ~/.bashrc <span class="s">&lt;&lt;&#39;EOF&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="s">alias pear=&quot;php /usr/lib/php/pear/pearcmd.php&quot; </span>
</span><span class='line'><span class="s">alias pecl=&quot;php /usr/lib/php/pear/peclcmd.php&quot; </span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="nv">$ </span>. ~/.bashrc
</span><span class='line'><span class="nv">$ </span>sudo pear channel-update pear.php.net
</span><span class='line'><span class="nv">$ </span>sudo pecl channel-update pecl.php.net
</span><span class='line'><span class="nv">$ </span>sudo pear upgrade --force pear
</span><span class='line'><span class="nv">$ </span>sudo pear upgrade
</span><span class='line'><span class="nv">$ </span>sudo pecl upgrade
</span><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;cat &gt;&gt; /etc/php.ini &lt;&lt;&#39;EOF&#39; </span>
</span><span class='line'><span class="s2">; Original - ;include_path = &quot;</span>.:/php/includes<span class="s2">&quot; </span>
</span><span class='line'><span class="s2">include_path = &quot;</span>.:/usr/lib/php/pear<span class="s2">&quot; </span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>We&#39;ll cover APC and other PECL modules after we have Homebrew up and running.</p>

<p>Toggle <strong>Web Sharing</strong> in <strong>System Preferences &gt; Sharing</strong> for the new PHP options to take effect.</p>

<h2 id="toc_2">Homebrew</h2>

<p>Hop onto the Mac App Store and download Xcode 4. It&#39;s free! When it&#39;s finished downloading, you&#39;ll have an Application called <strong>Install Xcode</strong> in the Applications folder, so run that and click through and you&#39;ll be all set. If it seems like overkill since we&#39;re not covering iOS or Mac app development, Xcode ships with the compiler we need for Homebrew and installing PECL modules.</p>

<p>To install Homebrew, go to <a href="https://github.com/mxcl/homebrew/wiki/installation">https://github.com/mxcl/homebrew/wiki/installation</a> and run the ruby script in Terminal. If you get the error message: <em>Error: Cannot write to /usr/local</em>, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chmod g+w /usr/local
</span><span class='line'>sudo chgrp staff /usr/local
</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_3">MariaDB / MySQL</h2>

<p><a href="http://mariadb.org/">MariaDB</a> is a fork of MySQL that has <a href="http://kb.askmonty.org/en/mariadb-versus-mysql">additional features</a> and is a drop-in replacement for MySQL. MariaDB is <a href="http://drupal.org/node/861192">supported by Drupal 7</a>, and works with Drupal 6 as well. Make the choice to go with either MariaDB or MySQL and continue; I&#39;ll cover how to setup and use both.</p>

<h3 id="toc_4">MySQL</h3>

<p>To install MySQL, simply run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install mysql
</span></code></pre></td></tr></table></div></figure>

<p>cmake is a dependency of MySQL, and cmake needs java, so if you get a pop-up asking you to install a Java runtime, be sure to click Install and proceed. Grab a book because compiling MySQL and its dependencies will take several minutes. Now, to configure MySQL (includes raising packet limits for easier use in a non-production scenario) and start:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">unset </span>TMPDIR
</span><span class='line'>mysql_install_db --verbose --user<span class="o">=</span><span class="sb">`</span>whoami<span class="sb">`</span> --basedir<span class="o">=</span><span class="s2">&quot;$(brew --prefix mysql)&quot;</span> --datadir<span class="o">=</span>/usr/local/var/mysql --tmpdir<span class="o">=</span>/tmp
</span><span class='line'>cp <span class="k">$(</span>brew --prefix mysql<span class="k">)</span>/support-files/my-small.cnf /usr/local/var/mysql/my.cnf
</span><span class='line'>sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;s/max_allowed_packet = 1.*M/max_allowed_packet = 2G/g&#39;</span> /usr/local/var/mysql/my.cnf
</span><span class='line'><span class="o">[</span> ! -d ~/Library/LaunchAgents <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir ~/Library/LaunchAgents
</span></code></pre></td></tr></table></div></figure>

<h3 id="toc_5">MariaDB</h3>

<p>To install MariaDB, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install mariadb pidof
</span></code></pre></td></tr></table></div></figure>

<p><em>pidof</em> is referenced in some of the MariaDB scripts but is not listed as a prerequisite in MariaDB&#39;s Homebrew formula, so we need to install it. To configure and start:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">unset </span>TMPDIR
</span><span class='line'>mysql_install_db --verbose --user<span class="o">=</span><span class="sb">`</span>whoami<span class="sb">`</span> --basedir<span class="o">=</span><span class="s2">&quot;$(brew --prefix mariadb)&quot;</span> --datadir<span class="o">=</span>/usr/local/var/mysql --tmpdir<span class="o">=</span>/tmp
</span><span class='line'>cp <span class="k">$(</span>brew --prefix mariadb<span class="k">)</span>/share/mysql/my-small.cnf /usr/local/var/mysql/my.cnf
</span><span class='line'>sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;s/max_allowed_packet = 1.*M/max_allowed_packet = 2G/g&#39;</span> /usr/local/var/mysql/my.cnf
</span><span class='line'><span class="o">[</span> ! -d ~/Library/LaunchAgents <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir ~/Library/LaunchAgents
</span></code></pre></td></tr></table></div></figure>

<h2 id="toc_6">APC and other PECL modules</h2>

<p>PECL modules require compiling, which is why I excluded it from my previous blog post because I did not require Xcode to be installed. An easy one is <strong>uploadprogress</strong> which is often recommended for Drupal development:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pecl install uploadprogress
</span><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;cat &gt;&gt; /etc/php.ini &lt;&lt;&#39;EOF&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="s2">; Enable PECL extension uploadprogress </span>
</span><span class='line'><span class="s2">extension=uploadprogress.so </span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>APC is easy too, but requires you to install pcre libraries. With Homebrew, this is easy, and we&#39;ll add some basic APC parameters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install pcre
</span><span class='line'><span class="nv">$ </span>sudo pecl install apc
</span><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;cat &gt;&gt; /etc/php.ini &lt;&lt;&#39;EOF&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="s2">; Enable PECL extension APC </span>
</span><span class='line'><span class="s2">extension=apc.so </span>
</span><span class='line'><span class="s2">apc.enabled = 1 </span>
</span><span class='line'><span class="s2">apc.shm_segments = 1 </span>
</span><span class='line'><span class="s2">apc.shm_size = 96M </span>
</span><span class='line'><span class="s2">apc.cache_by_default = 1 </span>
</span><span class='line'><span class="s2">apc.stat = 1 </span>
</span><span class='line'><span class="s2">apc.rfc1867 = 1 </span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Non-PECL extensions, like mcrypt, require some additional work. Check out <a href="http://blog.rogeriopvl.com/archives/php-mcrypt-in-snow-leopard-with-homebrew/">this guide for building mcrypt</a>.</p>

<h2 id="toc_7">Make PHP and MariaDB / MySQL Play Nice</h2>

<p>If you were to run <code>php -i|egrep &#39;mysql.*default_socket&#39;</code> you would see that PHP was compiled to expect the MySQL socket file in /var/mysql, but MariaDB / MySQL will place it in /tmp. This easiest fix is to tell PHP to look in /tmp:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;s|/var/mysql/mysql\.sock|/tmp/mysql.sock|g&#39;</span> /etc/php.ini
</span></code></pre></td></tr></table></div></figure>

<p>Toggle <strong>Web Sharing</strong> in <strong>System Preferences &gt; Sharing</strong> for the new PHP options to take effect.</p>

<h2 id="toc_8">Hooray!</h2>

<p>You should now be all set to keep adding more VirtualHosts in httpd-vhosts.conf and begin development on your local machine. Stay tuned for instructions on how to use <a href="http://www.macports.org/">MacPorts</a>!</p>

<p><strong>Update:</strong> If you&#39;re interested in leveraging more from Homebrew, like replacing Apache and PHP all from Homebrew, check out the <a href="https://github.com/adamv/homebrew-alt">homebrew-alt repository</a> on GitHub. Newer versions of Homebrew allow you to install formulae from URLs or alternate folders, and homebrew-alt provides formulae that replace built-in OS X applications (something official formulae will not do). For example, you could install PHP with PHP-FPM, something the OS X-provided PHP does not offer. Have fun exploring!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X 10.7 Lion Development: Native MAMP with MySQL installer]]></title>
    <link href="http://alanthing.com/blog/2011/08/24/os-x-107-lion-development-native-mamp-mysql-installer/"/>
    <updated>2011-08-24T15:30:00-04:00</updated>
    <id>http://alanthing.com/blog/2011/08/24/os-x-107-lion-development-native-mamp-mysql-installer</id>
    <content type="html"><![CDATA[<p>With the release of Lion, there are some subtle differences to setting up a local MAMP (Mac OS X, Apache, MySQL, PHP) environment compared to Snow Leopard. In an effort to keep this from being overly wordy and just get to the good stuff, we&#39;ll dive right in, so read on to get started.</p>

<p>Note that for all commands before that are starting with a $, the dollar sign is showing a command-line prompt in <a href="http://www.apple.com/macosx/apps/all.html#terminal">Terminal</a>, and you should not actually type it as part of the commands.</p>

<h2 id="toc_0">Apache</h2>

<p>We&#39;ll set things up so we won&#39;t need sudo often in the future, and so we can manage multiple VirtualHosts. We&#39;ll keep the Apache information and our website roots in ~/Sites, and Apache logs in ~/Sites/logs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="o">[</span> ! -d ~/Sites <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir ~/Sites
</span><span class='line'><span class="nv">$ </span>touch ~/Sites/httpd-vhosts.conf
</span><span class='line'><span class="nv">$ </span>sudo ln -s ~/Sites/httpd-vhosts.conf /etc/apache2/other
</span><span class='line'><span class="nv">$ </span>mkdir ~/Sites/logs
</span><span class='line'><span class="nv">$ </span>chmod 0777 ~/Sites/logs
</span></code></pre></td></tr></table></div></figure>

<p>Edit the new <strong>~/Sites/httpd-vhosts.conf</strong> file and add the following. Note that you&#39;ll need to change all instances of &quot;/Users/name&quot; to your actual home folder path.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># Use name-based virtual hosting. </span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="nb">NameVirtualHost</span> *:80
</span><span class='line'>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># Set up permissions for VirtualHosts in ~/Sites </span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="nt">&lt;Directory</span> <span class="s">&quot;/Users/name/Sites&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> Indexes FollowSymLinks MultiViews
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">All</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'><span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For http://localhost in the OS X default location </span>
</span><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">_default_:80</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">ServerName</span> localhost
</span><span class='line'>    <span class="nb">DocumentRoot</span> <span class="sx">/Library/WebServer/Documents</span>
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># VirtualHosts below </span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'>
</span><span class='line'><span class="c">## Template </span>
</span><span class='line'><span class="c">#&lt;VirtualHost *:80&gt; </span>
</span><span class='line'><span class="c">#    ServerName domain.local </span>
</span><span class='line'><span class="c">#    CustomLog &quot;/Users/name/Sites/logs/domain.local-access_log&quot; combined </span>
</span><span class='line'><span class="c">#    ErrorLog &quot;/Users/name/Sites/logs/domain.local-error_log&quot; </span>
</span><span class='line'><span class="c">#    DocumentRoot &quot;/Users/name/Sites/domain.local&quot; </span>
</span><span class='line'><span class="c">#&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Launch <strong>System Preferences</strong> and go to <strong>Sharing</strong> and toggle <strong>Web Sharing</strong> off and on so it&#39;s started and reloaded with the new settings. Then click on the blue underlined link under <em>&quot;Your computer&#39;s website is available at this address:&quot;</em> to ensure Apache is working correctly, and you should see text saying &quot;It works!&quot;</p>

<p>To add a site, duplicate the &lt;VirtualHost&gt; section under the Template, remove the comments, and edit appropriately. Edit /etc/hosts (or use <a href="http://code.google.com/p/gmask/">Gas Mask</a>) and add an entry for 127.0.0.1 for your project.local, and make the appropriate change in the conf file, along with the correct DocumentRoot and Log file locations. See <a href="http://httpd.apache.org/docs/2.2/vhosts/name-based.html">Apache&#39;s documentation</a> for more information.</p>

<h2 id="toc_1">PHP</h2>

<p>OS X has shipped with PHP for quite some time, but not had it enabled by default. We&#39;ll enable mod_php for Apache, and also set up an /etc/php.ini file based on the default one shipped with Lion with some development-friendly changes. Change your timezone as needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo bash -c <span class="s2">&quot;grep php /etc/apache2/httpd.conf|grep LoadModule|cut -d&#39;#&#39; -f2 &gt; /etc/apache2/other/php5-loadmodule.conf&quot;</span>
</span><span class='line'><span class="nv">$ </span>sudo cp -a /etc/php.ini.default /etc/php.ini
</span><span class='line'><span class="nv">$ </span>sudo bash -c <span class="s2">&quot;cat &gt;&gt; /etc/php.ini &lt;&lt;&#39;EOF&#39; </span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s2">;; </span>
</span><span class='line'><span class="s2">;; User customizations below </span>
</span><span class='line'><span class="s2">;; </span>
</span><span class='line'>
</span><span class='line'><span class="s2">; Original - memory_limit = 128M </span>
</span><span class='line'><span class="s2">memory_limit = 196M </span>
</span><span class='line'><span class="s2">; Original - post_max_size = 8M </span>
</span><span class='line'><span class="s2">post_max_size = 200M </span>
</span><span class='line'><span class="s2">; Original - upload_max_filesize = 2M </span>
</span><span class='line'><span class="s2">upload_max_filesize = 100M </span>
</span><span class='line'><span class="s2">; Original - default_socket_timeout = 60 </span>
</span><span class='line'><span class="s2">default_socket_timeout = 600 </span>
</span><span class='line'><span class="s2">; Original - max_execution_time = 30 </span>
</span><span class='line'><span class="s2">max_execution_time = 300 </span>
</span><span class='line'><span class="s2">; Original - max_input_time = 60 </span>
</span><span class='line'><span class="s2">max_input_time = 600 </span>
</span><span class='line'><span class="s2">; Original - display_errors = Off </span>
</span><span class='line'><span class="s2">display_errors = on </span>
</span><span class='line'><span class="s2">; Original - display_startup_errors = Off </span>
</span><span class='line'><span class="s2">display_startup_errors = on </span>
</span><span class='line'><span class="s2">; Original - ;date.timezone = </span>
</span><span class='line'><span class="s2">date.timezone = &#39;America/New_York&#39; </span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>Optional:</strong> Lion ships with PEAR but not installed, whereas Snow Leopard it was installed. This will install PEAR from the phar archive, upgrade it, and add <code>pear</code> and <code>pecl</code> aliases to your shell.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /usr/bin/php /usr/lib/php/install-pear-nozlib.phar
</span><span class='line'><span class="nv">$ </span>cat &gt;&gt; ~/.bashrc <span class="s">&lt;&lt;&#39;EOF&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="s">alias pear=&quot;php /usr/lib/php/pear/pearcmd.php&quot; </span>
</span><span class='line'><span class="s">alias pecl=&quot;php /usr/lib/php/pear/peclcmd.php&quot; </span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="nv">$ </span>. ~/.bashrc
</span><span class='line'><span class="nv">$ </span>sudo pear channel-update pear.php.net
</span><span class='line'><span class="nv">$ </span>sudo pecl channel-update pecl.php.net
</span><span class='line'><span class="nv">$ </span>sudo pear upgrade --force pear
</span><span class='line'><span class="nv">$ </span>sudo pear upgrade
</span><span class='line'><span class="nv">$ </span>sudo pecl upgrade
</span><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s2">&quot;cat &gt;&gt; /etc/php.ini &lt;&lt;&#39;EOF&#39; </span>
</span><span class='line'><span class="s2">; Original - ;include_path = &quot;</span>.:/php/includes<span class="s2">&quot; </span>
</span><span class='line'><span class="s2">include_path = &quot;</span>.:/usr/lib/php/pear<span class="s2">&quot; </span>
</span><span class='line'><span class="s2">EOF&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note that installing most pecl modules will require having a compiler installed via Xcode. I&#39;ll be addressing installing <a href="http://pecl.php.net/package/uploadprogress">uploadprogress</a> and <a href="http://pecl.php.net/package/apc">APC</a> in a later post, since this walkthrough requires no compiling.</p>

<p>Toggle <strong>Web Sharing</strong> in <strong>System Preferences &gt; Sharing</strong> for the new PHP options to take effect.</p>

<h2 id="toc_2">MySQL</h2>

<p>MySQL is the only thing not shipped with OS X that we need for our development environment. Go to the download site for OS X pre-built binaries at <a href="http://dev.mysql.com/downloads/mysql/index.html#macosx-dmg">http://dev.mysql.com/downloads/mysql/index.html#macosx-dmg</a> and choose the <strong>DMG Archive</strong> most appropriate for your system. As of this writing, the most recent version says <em>OS X 10.6</em>, but it will work on 10.7 as well.</p>

<p>Open the downloaded disk image and begin by installing the <em>mysql-5.x.x-osx10.6-x86_64.pkg</em> file. Once the Installer script is completed, install the Preference Pane by double-clicking on MySQL.prefPane. If you are not sure where to install the preference pane, choose &quot;Install for this user only.&quot;</p>

<p><strong>Optional:</strong> If you wish to have MySQL start on boot, you do need to additionally install the MySQLStartupItem.pkg file. The preference pane has a toggle for starting on boot, but it will not work until you install the pkg and you run the following in Terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chown -R root:wheel /Library/StartupItems/MySQLCOM
</span></code></pre></td></tr></table></div></figure>

<p>Open <strong>System Preferences</strong> and <strong>MySQL</strong> and start the database by clicking the <strong>Start MySQL Server</strong> button.</p>

<p><strong>Optional:</strong> The MySQL installer installed its files to /usr/local/mysql, and the binaries are in /usr/local/mysql/bin which is not in the $PATH of any user by default. Rather than edit the $PATH shell variable, we add symbolic links in /usr/local/bin (a location already in $PATH) to a few MySQL binaries. Add more or omit more binaries as desired:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span> ! -d /usr/local/bin <span class="o">]</span> <span class="o">&amp;&amp;</span> sudo mkdir -p /usr/local <span class="o">&amp;&amp;</span> sudo chmod 0777 /usr/local <span class="o">&amp;&amp;</span> mkdir /usr/local/bin <span class="o">&amp;&amp;</span> sudo chmod 0755 /usr/local
</span><span class='line'><span class="nb">cd</span> /usr/local/bin
</span><span class='line'>ln -s /usr/local/mysql/bin/mysql
</span><span class='line'>ln -s /usr/local/mysql/bin/mysqladmin
</span><span class='line'>ln -s /usr/local/mysql/bin/mysqldump
</span><span class='line'>ln -s /usr/local/mysql/support-files/mysql.server
</span></code></pre></td></tr></table></div></figure>

<p>This script ships with MySQL and only needs to be run once, and it should be run with sudo. As you run it, you can accept all other defaults after you set the root user&#39;s password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /usr/local/mysql/bin/mysql_secure_installation
</span></code></pre></td></tr></table></div></figure>

<p>After installing MySQL, several sample my.cnf files are created but none is placed where MySQL can find it. Start with a &quot;small&quot; configuration file and make a few changes to increase the max_allowed_packet variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp /usr/local/mysql/support-files/my-small.cnf /usr/local/mysql/data/my.cnf
</span><span class='line'>sudo sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;s/max_allowed_packet = 1.*M/max_allowed_packet = 2G/g&#39;</span> /usr/local/mysql/data/my.cnf
</span></code></pre></td></tr></table></div></figure>

<p>To load in these changes, go back to the MySQL System Preferences pane, and restart the server by pressing &quot;Stop MySQL Server&quot; followed by &quot;Start MySQL Server.&quot;</p>

<h2 id="toc_3">Make PHP and MySQL Play Nice</h2>

<p>If you were to run <code>php -i|egrep &#39;mysql.*default_socket&#39;</code> you would see that PHP was compiled to expect the MySQL socket file in /var/mysql, but MySQL will place it in /tmp. This easiest fix is to tell PHP to look in /tmp:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;s/\/var\/mysql\/mysql\.sock/\/tmp\/mysql\.sock/g&#39;</span> /etc/php.ini
</span></code></pre></td></tr></table></div></figure>

<p>Toggle <strong>Web Sharing</strong> in <strong>System Preferences &gt; Sharing</strong> for the new PHP options to take effect.</p>

<h2 id="toc_4">Hooray!</h2>

<p>You should now be all set to keep adding more VirtualHosts in httpd-vhosts.conf and begin development on your local machine. Stay tuned for instructions on how to use <a href="http://mariadb.org/">MariaDB</a> or MySQL with <a href="http://mxcl.github.com/homebrew/">Homebrew</a> instead of the Oracle MySQL installer, and <a href="http://www.macports.org/">MacPorts</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Syslog instead of Watchdog]]></title>
    <link href="http://alanthing.com/blog/2011/08/17/use-syslog-instead-watchdog/"/>
    <updated>2011-08-17T16:02:00-04:00</updated>
    <id>http://alanthing.com/blog/2011/08/17/use-syslog-instead-watchdog</id>
    <content type="html"><![CDATA[<p>In this example, we choose one of our servers to receive the Syslog traffic and the others will send traffic to it. In a large environment, you should use a non-public-facing server to act as a syslog server for your sites, ideally using a database to store data, but we&#39;ll just output everything to a file to keep things simple for this guide. If you decide to use a database like MySQL to store your data, this can still provide you with a starting point, but just know that using your same production database server defeats my intended purpose since I was ultimately trying to alleviate the amount of writes on the database. </p>

<p>Start by using yum to install <strong>rsyslog</strong>. If you&#39;re using another distro, rsyslog is likely included in the base repositories. Also, note that CentOS 6 uses rsyslog by default so you may skip this step if it&#39;s already installed on your system. You&#39;ll need this on all servers running Drupal or your rsyslog server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install rsyslog
</span></code></pre></td></tr></table></div></figure>

<p>For CentOS 5, you&#39;ll need to unload the default syslog and switch to rsyslog. The following will ensure it starts on boot as well. Until otherwise noted, run the following commands on all servers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/sbin/service syslog stop <span class="o">&amp;&amp;</span> /sbin/service rsyslog start
</span><span class='line'>/sbin/chkconfig rsyslog on
</span><span class='line'>/sbin/chkconfig syslog off
</span></code></pre></td></tr></table></div></figure>

<p>Rather than hacking the config file to bits, I find it easier to create an include folder and keep things organized by files. I also like to back up default files created by RPMs so if an update leaves behind rsyslog.rpmnew, you can compare it to the default to see the changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -v /etc/rsyslog.d
</span><span class='line'>cp -av /etc/rsyslog.conf<span class="o">{</span>,-default<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Add the following to <strong>/etc/rsyslog.conf</strong> below the last line containing &quot;$ModLoad&quot;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Include all files in /etc/rsyslog.d</span>
</span><span class='line'><span class="nv">$IncludeConfig</span> /etc/rsyslog.d/*.conf
</span></code></pre></td></tr></table></div></figure>

<p>Reload the current rsyslog configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/sbin/service rsyslog reload
</span></code></pre></td></tr></table></div></figure>

<p>The next several steps will only need to be run on the syslog server. Back up and edit <strong>/etc/sysconfig/rsyslog</strong> to accept UDP connections from other servers. If you&#39;re using iptables, open up port 514 on UDP.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp -a /etc/sysconfig/rsyslog /etc/sysconfig/rsyslog-default
</span></code></pre></td></tr></table></div></figure>

<p>Edit /etc/sysconfig.rsyslog and change <strong>SYSLOGD_OPTIONS=&quot;-m 0&quot;</strong> to <strong>SYSLOGD_OPTIONS=&quot;-m 0 -r514&quot;</strong></p>

<p>Create a root folder for website logs to go:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir /var/log/websites
</span></code></pre></td></tr></table></div></figure>

<p>Create the following file to work with example.com (this format will allow you to create other files for anotherexample.org, etc.): <strong>/etc/rsyslog.d/example.conf</strong>. Add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># example.com</span>
</span><span class='line'><span class="nv">$template</span> DailyPerHostLogs-example,<span class="s2">&quot;/var/log/websites/%SYSLOGTAG:F,58:1%/%SYSLOGTAG:F,58:1%.%$YEAR%-%$MONTH%-%$DAY%.log&quot;</span>
</span><span class='line'>:syslogtag, contains, <span class="s2">&quot;example&quot;</span>                    -?DailyPerHostLogs-example
</span><span class='line'>&amp; ~
</span></code></pre></td></tr></table></div></figure>

<p>This will create <strong>/var/log/websites/example/example.2011-08-17.log</strong> and new files for each day. To add other websites, duplicate the file and replace example with another string. We&#39;ll later use &quot;example&quot; in the Drupal configuration for Syslog later that will correlate to the correct file.</p>

<p>For those curious about this configuration: a template is needed for dynamic file paths with year-month-day. The syslogtag variable will use the string sent by Drupal in the Syslog module settings. Drupal will send it as <strong>example:</strong>, so <em>:F,58:1</em> will use the colon as the field separator and grab the first field. Even though it would appear as though this single template could be used on multiple sites, I found I still had to have a unique template for each website or all websites would dump into the same file (perhaps this is remedied in newer versions of rsyslog). The last line means that the syslog input will not be sent to any other syslog files.</p>

<p>Reload the current rsyslog configuration, and the server is set up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/sbin/service rsyslog reload
</span></code></pre></td></tr></table></div></figure>

<p>On the clients, we&#39;ll create simple .conf files for each website. Create <strong>/etc/rsyslog.d/example.conf</strong> on each additional web server containing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># example.com</span>
</span><span class='line'>:syslogtag, contains, <span class="s2">&quot;example&quot;</span>     @192.168.1.20
</span></code></pre></td></tr></table></div></figure>

<p>Note that the IP address can also be a domain name, though I would not recommend it to keep another process from being needed for the lookup.</p>

<p>Reload the current rsyslog configuration, and each web client is set up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/sbin/service rsyslog reload
</span></code></pre></td></tr></table></div></figure>

<p>Enable the syslog module and go to <strong><a href="http://example.com/admin/settings/logging/syslog">http://example.com/admin/settings/logging/syslog</a></strong>. Set the Syslog Identity to match the value used in /etc/rsyslog.d/example.conf; in this case, <strong>example</strong>. Using the rsyslog filter we&#39;re using, it does not matter which facility we send to. Save the configuration.</p>

<p><img src="http://echoditto.com/sites/default/files/rsyslog-screenshot.png" alt="rsyslog-screenshot"></p>

<p>Go to your rsyslog server and watch the <strong>/var/log/websites/example/example.2011-08-16.log</strong> file. After verifying that the server is receiving all messages, disable the Watchdog module in <strong><a href="http://example.org/admin/build/modules/list">http://example.org/admin/build/modules/list</a></strong>.</p></p>

<p>There are improvements that can be had here, like using TCP instead of UDP, using <a href="http://loganalyzer.adiscon.com">LogAnalyzer</a> to filter through the files, and more. This was meant to be an introduction into getting combined text files of your watchdog output while reducing the strain on your database by not writing to it as often.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dump each MySQL table to a file]]></title>
    <link href="http://alanthing.com/blog/2011/02/22/dump-each-mysql-table-file/"/>
    <updated>2011-02-22T14:30:00-05:00</updated>
    <id>http://alanthing.com/blog/2011/02/22/dump-each-mysql-table-file</id>
    <content type="html"><![CDATA[<p>Here&#39;s a one-liner to dump each table in a database to it&#39;s own .sql file. Crack open your shell of choice and follow along.</p>

<p>Replace the USER, PASSWORD, and DBNAME values with your own. If you&#39;re not running this to connect to a local database, add &#8211;host=domain.tld after each password to connect to your remote server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in $(mysql -uUSER -p'PASSWORD' --batch --skip-column-names DBNAME -e'show tables;'); do mysqldump -uUSER -p'PASSWORD' DBNAME $i &gt; DBNAME-$i.sql; done</span></code></pre></td></tr></table></div></figure>

<p>Users, passwords, and database names are case sensitive, I made them uppercase here to call them out. Leave a comment if you have a question or notice a problem or typo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix pear permissions problem on Mac OS X]]></title>
    <link href="http://alanthing.com/blog/2011/02/15/fix-pear-permissions-problem-mac-os-x/"/>
    <updated>2011-02-15T16:34:00-05:00</updated>
    <id>http://alanthing.com/blog/2011/02/15/fix-pear-permissions-problem-mac-os-x</id>
    <content type="html"><![CDATA[<p>On Snow Leopard, you can install drush without using sudo. A dependency for installing drush is downloading a Pear library. The following example should allow you to be able to use the following commands to install drush to /usr/local/drush with a symlink in /usr/local/bin/drush, but it fails on the &#39;pear download&#39; step, even though it&#39;s writing to a user-writeable directory. Read on the figure out how to fix this annoying problem.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn co http://subversible.svn.beanstalkapp.com/modules/drush/tags/DRUPAL-7--4-2/ /usr/local/drush 
</span><span class='line'>cd /tmp 
</span><span class='line'>pear download Console_Table 
</span><span class='line'>tar zxvf `ls Console_Table-*.tgz` `ls Console_Table-*.tgz | sed -e 's/\.[a-z]\{3\}$//'`/Table.php 
</span><span class='line'>mv `ls Console_Table-*.tgz | sed -e 's/\.[a-z]\{3\}$//'`/Table.php 
</span><span class='line'>/usr/local/drush/includes/table.inc $ rm -fr Console_Table-* 
</span><span class='line'>ln -s /usr/local/drush/drush /usr/local/bin/drush</span></code></pre></td></tr></table></div></figure>

<p>This assumes 1) /usr/local exists and you can write to it, and 2) you&#39;ve added the following to your ~/.profile (or ~/.bashrc or ~/.bash_profile):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Use the built-in PEAR and PECL scripts
</span><span class='line'>alias pear="/usr/bin/php /usr/lib/php/pearcmd.php"
</span><span class='line'>alias pecl="/usr/bin/php /usr/lib/php/peclcmd.php"</span></code></pre></td></tr></table></div></figure>

<p>But, OS X has a strange permissions problem when using pear for the first time. Running &#39;pear download&#39; should not require sudo, but if you&#39;ve never used pear before you&#39;ll get this error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pear download Console_Table 
</span><span class='line'>
</span><span class='line'>Warning: touch(): Unable to create file /usr/lib/php/.lock because Permission denied in PEAR/Registry.php on line 835 
</span><span class='line'>
</span><span class='line'>Warning: touch(): Unable to create file /usr/lib/php/.lock because Permission denied in /usr/lib/php/PEAR/Registry.php on line 835 
</span><span class='line'>could not create lock file: fopen(/usr/lib/php/.lock): failed to open stream: No such file or directory 
</span><span class='line'>invalid package name/package file "Console_Table" 
</span><span class='line'>download failed</span></code></pre></td></tr></table></div></figure>

<p>Strange, right? Administrators in OS X are in the wheel group, but /usr/lib/php is not writable by the group. Before you go changing permissions (which might not be retained after an OS X update), all you have to do is run something as root with pear:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pear list
</span><span class='line'>Installed packages, channel pear.php.net:
</span><span class='line'>=========================================
</span><span class='line'>Package          Version State
</span><span class='line'>Archive_Tar      1.3.3   stable
</span><span class='line'>Console_Getopt   1.2.3   stable
</span><span class='line'>PEAR             1.8.0   stable
</span><span class='line'>Structures_Graph 1.0.2   stable
</span><span class='line'>XML_Util         1.2.1   stable</span></code></pre></td></tr></table></div></figure>

<p>The permissions and ownership of /usr/lib/php are still the same, but there is now the file /usr/lib/php/.lock</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -Al /usr/lib/php/.lock
</span><span class='line'>-rw-r--r--  1 root  wheel  0 Feb 15 16:08 /usr/lib/php/.lock</span></code></pre></td></tr></table></div></figure>

<p>You&#39;d think that when pear has completed running the list command it would delete the .lock file, but it doesn&#39;t. But since it&#39;s there, the original pear download command will now run without sudo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pear download Console_Table
</span><span class='line'>downloading Console_Table-1.1.4.tgz ...
</span><span class='line'>Starting to download Console_Table-1.1.4.tgz (9,369 bytes)
</span><span class='line'>.....done: 9,369 bytes
</span><span class='line'>File /private/tmp/Console_Table-1.1.4.tgz downloaded</span></code></pre></td></tr></table></div></figure>

<p>Of course, running &#39;pear install&#39; or many other commands will require sudo, but it&#39;s silly that commands that do not write any files to /usr/lib/php or its children would require sudo.</p>

<p>Unrelated to the pear permissions issue, but related to my drush install script; this assumes that /usr/local and /usr/local/bin exist. By default, /usr/local/bin is in the $PATH regardless of whether or not the folder exists, but on a vanilla OS X install /usr/local does not exist. I have both Xcode and homebrew installed. I know homebrew will create /usr/local for you, but I&#39;m not sure about Xcode. If you don&#39;t want to have either installed but want drush installed to /usr/local, run this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir -p /usr/local/bin
</span><span class='line'>sudo chown -R root:wheel /usr/local</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy PHP 5.2 RPMs on CentOS]]></title>
    <link href="http://alanthing.com/blog/2011/01/25/easy-php-5-dot-2-rpms-on-centos/"/>
    <updated>2011-01-25T10:13:00-05:00</updated>
    <id>http://alanthing.com/blog/2011/01/25/easy-php-5-dot-2-rpms-on-centos</id>
    <content type="html"><![CDATA[<p>I had previously <a href="http://echodittolabs.org/blog/2009/05/all-i-want-php-52-centosrhel">written a post</a> on one method of upgrading PHP from 5.1 to 5.2 on CentOS and Red Hat servers by creating new RPMs. Since then, I have found a much better way to create PHP 5.2.17 (or newer) RPMs to easily upgrade (and later remove, if you want) the older version available by default. I&#39;ll presume you have no prior experience building PHP RPMs.</p>

<p>We start by adding the <a href="http://fedoraproject.org/wiki/EPEL">Extra Packages for Enterprise Linux (EPEL) repository</a> to our server. EPEL is safe to add as an additional repository and leave enabled because it <a href="http://fedoraproject.org/wiki/EPEL/FAQ#How_is_EPEL_different_from_other_third_party_repositories_for_RHEL_and_derivatives.3F">provides complementary packages only</a> and will not conflict with the CentOS or Red Hat repositories. Since their installation method may change, I won&#39;t reproduce it here; instead head over to the <a href="http://fedoraproject.org/wiki/EPEL/FAQ#howtouse">installation portion of the FAQ</a> and it&#39;s just one line to get started with EPEL.</p>

<p>With EPEL enabled, we will need just one new package to build RPMs: <a href="http://fedoraproject.org/wiki/Projects/Mock">Mock</a>. Mock will create a chroot, download what&#39;s necessary to build your RPM, build, and cleanup afterwards. Mock only requires a couple of python packages as dependencies; it will not require a compiler or anything like that since mock will grab them as needed during operation. I will presume you are not running as root so I will use sudo as necessary. To install mock:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install mock
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s it. You can run all mock operations with the &#39;sudo&#39; command to run as root, but your packages will be built inside the chroot as a non-root user. Or, if you prefer to not use sudo when running mock, add your user to the mock group (where username is your user):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /usr/sbin/usermod -G mock username
</span></code></pre></td></tr></table></div></figure>

<p>Using the source code from php.net and creating a RPM spec file from scratch would be a lot of work, so we&#39;ll grab a source RPM for PHP 5.2. I&#39;ve found that <a href="http://blog.famillecollet.com/">Remi</a> has the most up-to-date RPM spec with the latest patches and robust install scripts. <a href="http://rpms.famillecollet.com/SRPMS/">Browse Remi&#39;s SRPMS</a> and download the latest PHP 5.2 file. As of this writing, it&#39;s php-5.2.17-1.remi.src.rpm. On your system, download it with wget in your home directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~
</span><span class='line'>wget http://rpms.famillecollet.com/SRPMS/php-5.2.17-1.remi.src.rpm
</span></code></pre></td></tr></table></div></figure>

<p>Now, we could just run mock and rebuild this source RPM and hopefully install the results, but it would fail due to not having sqlite2-devel installed. Remi provides sqlite2 and sqlite2-devel, so you could add Remi&#39;s yum repository to your mock settings, but then it would grab Remi&#39;s other updated packages like MySQL 5.5 and others during the PHP build. My goal here is to only build PHP against Base CentOS and EPEL packages. So, we have to edit the spec file and rebuild the source RPM before passing it off to mock. Don&#39;t worry; while there are a few steps, it&#39;s not very difficult if you follow closely.</p>

<p>To unpack the source RPM we just downloaded into our home directory, we&#39;ll need to set up the .rpmmacros file in our home directory. Why? Without it, it will attempt to extract to /usr/src/redhat, and only root can use that directory, and you should <a href="http://wiki.centos.org/HowTos/SetupRpmBuildEnvironment">never build any packages as a privileged user</a>. We&#39;ll create the macros file and the directories it needs from your home directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;%_topdir %(echo $HOME)/rpmbuild&#39;</span> &gt; ~/.rpmmacros
</span><span class='line'>mkdir -p ~/rpmbuild/<span class="o">{</span>SOURCES,SPECS,SRPMS<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Unpack the source RPM. This will extract the PHP 5.2.17 source and any patches and configuration files into ~/rpmbuild/SOURCES, and the spec file will be in ~/rpmbuild/SPECS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rpm -ivh php-5.2.17-1.remi.src.rpm
</span></code></pre></td></tr></table></div></figure>

<p>Now we need to make a couple of changes to the spec file. We&#39;ll change to the SPECS directory and make a copy of Remi&#39;s spec file so we can keep it for reference:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/rpmbuild/SPECS
</span><span class='line'>cp -a php52.spec php.spec
</span></code></pre></td></tr></table></div></figure>

<p>Open up php.spec in your favorite text editor and let&#39;s have the PHP configure script use the bundled SQLite2 libraries instead of searching for ones on your system:</p>

<ol>
<li>Find the line &quot;BuildRequires: sqlite2-devel &gt;= 2.8.0&quot; and delete it</li>
<li>Find &quot;&#8211;with-sqlite=shared,%{_prefix} \&quot; and replace it with &quot;&#8211;with-sqlite=shared \&quot;</li>
<li>Optionally: Add your own lines to the %changelog describing that you removed the sqlite2-devel build requirement</li>
<li>Optionally: Remove the first 4 lines after &quot;%pre common&quot; to remove Remi&#39;s note about their forums</li>
</ol>

<p>It took 2 small tweaks to remove the sqlite2-devel RPM requirement not found in our standard repositories. See <a href="http://paste.ly/4Yrx">php.spec.diff</a> to see only the changes we made; or <a href="http://paste.ly/4Ys5">php.spec</a> for the complete file if you do not want to edit it yourself.</p>

<p>The hard part is now over! It&#39;s easy from here on out. First step is to build the newly-edited spec into your own source RPM. But first, if you don&#39;t have &quot;rpmbuild&quot; available, it&#39;s a quick install via yum:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install rpm-build
</span></code></pre></td></tr></table></div></figure>

<p>It&#39;s possible your system may have already had the yum package rpm-build installed. We&#39;ll build our source RPM with &quot;-bs&quot; to <strong>b</strong>uild the <strong>s</strong>ource, and &quot;&#8211;nodeps&quot; to prevent our system from checking all of the &quot;Requires&quot; in the spec since we&#39;re just building the source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rpmbuild --nodeps -bs php.spec
</span><span class='line'>Wrote: /home/username/rpmbuild/SRPMS/php-5.2.17-1.src.rpm
</span></code></pre></td></tr></table></div></figure>

<p>rpmbuild will show you where it wrote your source RPM. All we have to do is provide it to mock; &quot;-v&quot; will give us verbose output and &quot;-r epel-5-x86_64&quot; will use the mock profile at &quot;/etc/mock/epel-5-x86_64.cfg&quot;. If you&#39;re on a 32-bit system, change &quot;epel-5-x86_64&quot; to &quot;epel-5-i386&quot;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/rpmbuild/SRPMS
</span><span class='line'>mock -v -r epel-5-x86_64 php-5.2.17-1.src.rpm
</span></code></pre></td></tr></table></div></figure>

<p>The output shows you that mock is creating a chroot, downloading the bare essentials needed for a chroot and compiling tools, ccache to speed up compilation, and the packages in all &quot;Requires&quot; lines in the spec file. When mock is finished with the build after several minutes, you&#39;ll see output similar to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO: Done<span class="o">(</span>php-5.2.17-1.src.rpm<span class="o">)</span> Config<span class="o">(</span>epel-5-x86_64<span class="o">)</span> 10 minutes 20 seconds
</span><span class='line'>INFO: Results and/or logs in: /var/lib/mock/epel-5-x86_64/result
</span></code></pre></td></tr></table></div></figure>

<p>The /var/lib/mock/epel-5-x86_64/results/ folder will contain all of your PHP RPMs, including another source RPM. You can now either install these PHP packages by hand, or you can dump them into <a href="http://www.techrepublic.com/blog/opensource/create-your-own-yum-repository/609">your own Yum repository</a> and install with yum.</p>

<h3 id="toc_0">TL;DR</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install mock
</span><span class='line'>sudo /usr/sbin/usermod -G mock username
</span><span class='line'><span class="nb">cd</span> ~
</span><span class='line'>wget http://rpms.famillecollet.com/SRPMS/php-5.2.17-1.remi.src.rpm
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;%_topdir %(echo $HOME)/rpmbuild&#39;</span> &gt; ~/.rpmmacros
</span><span class='line'>mkdir -p ~/rpmbuild/<span class="o">{</span>SOURCES,SPECS,SRPMS<span class="o">}</span>
</span><span class='line'>rpm -ivh php-5.2.17-1.remi.src.rpm
</span><span class='line'><span class="nb">cd</span> ~/rpmbuild/SPECS
</span><span class='line'>cp -a php52.spec php.spec
</span><span class='line'>sed -i <span class="s2">&quot;/BuildRequires\: sqlite2-devel/d&quot;</span> php.spec
</span><span class='line'>sed -i <span class="s2">&quot;s/--with-sqlite=shared,%{_prefix}/--with-sqlite=shared/&quot;</span> php.spec
</span><span class='line'>sudo yum install rpm-build
</span><span class='line'>rpmbuild --nodeps -bs php.spec
</span><span class='line'><span class="nb">cd</span> ~/rpmbuild/SRPMS
</span><span class='line'>mock -v -r epel-5-x86_64 php-5.2.17-1.src.rpm
</span></code></pre></td></tr></table></div></figure>

<p>Resulting RPMs will be in /var/lib/epel-5-x86_64/results. If on a 32-bit system, replace epel-5-x86_64 with epel-5-i386.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are your WordPress sites running the latest core?]]></title>
    <link href="http://alanthing.com/blog/2011/01/05/are-your-wordpress-sites-running-the-latest-core/"/>
    <updated>2011-01-05T20:31:00-05:00</updated>
    <id>http://alanthing.com/blog/2011/01/05/are-your-wordpress-sites-running-the-latest-core</id>
    <content type="html"><![CDATA[<p>In addition to hosting Drupal sites, we also host a number of WordPress sites. Similar to (checking all of our Drupal core versions)[<a href="http://echodittolabs.org/blog/2011/01/are-your-drupal-sites-running-latest-core">http://echodittolabs.org/blog/2011/01/are-your-drupal-sites-running-latest-core</a>], we needed an easy way to quickly see what versions we are running on all of our WordPress sites. Kudos to <a href="http://echodittolabs.org/users/ethan">Ethan</a> for getting this one kicked off; here is a bash script to check your definable <code>$WEBHOME</code> (where you deposit all of your WordPress webroots) and scan for WordPress versions.</p>

<p>Note: this requires bash, grep, wc, sed, awk, and tree. If your system doesn&#39;t have tree, it&#39;s usually pretty easy to get from EPEL/Homebrew/apt-get/[mac]ports/etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Where to start scanning</span>
</span><span class='line'><span class="nv">WEBHOME</span><span class="o">=</span>/var/www/vhosts
</span><span class='line'>
</span><span class='line'><span class="c"># Workaround to fix awk counting below</span>
</span><span class='line'><span class="nv">WEBHOMECOUNT</span><span class="o">=</span><span class="k">$(($(</span><span class="nb">echo</span> <span class="s2">&quot;${WEBHOME}&quot;</span>|grep -o <span class="s2">&quot;/&quot;</span>|wc -l| sed s/<span class="se">\ </span>//g<span class="k">)</span><span class="o">+</span><span class="m">2</span><span class="k">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Other projects could use &#39;version.php&#39; so we include </span>
</span><span class='line'><span class="c"># &#39;wp-includes/&#39; in our search to limit it to WordPress</span>
</span><span class='line'><span class="k">for </span>i in <span class="k">$(</span>tree -L 5 -if <span class="k">${</span><span class="nv">WEBHOME</span><span class="k">}</span> | grep <span class="s1">&#39;wp-includes/version.php&#39;</span><span class="k">)</span>; <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">SITE</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$i</span>|awk -v <span class="nv">count</span><span class="o">=</span><span class="s2">&quot;$WEBHOMECOUNT&quot;</span> -F/ <span class="s1">&#39;{for(j=count;j&lt;=NF-2;j++) \</span>
</span><span class='line'><span class="s1">        printf $j&quot;/&quot;}&#39;</span> | sed <span class="s1">&#39;s/.$//g&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">VERSION</span><span class="o">=</span><span class="k">$(</span>grep <span class="s2">&quot;wp_version = &quot;</span> <span class="nv">$i</span>|awk -F<span class="se">\&#39;</span> <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="nv">$SITE</span> - <span class="nv">$VERSION</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

<p>As a result, you&#39;ll see output like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./wordpress-version-check.sh
</span><span class='line'>speedyupdates.com - 3.0.4
</span><span class='line'>littlebehind.org - 3.0.3
</span><span class='line'>scaredtoupgrade.com/blog - 2.8.2
</span><span class='line'>kickinitoldschool.org/web/wordpress - 2.0.2
</span></code></pre></td></tr></table></div></figure>

<p>If you think there&#39;s a better way, or have any questions, let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are your Drupal sites running the latest core?]]></title>
    <link href="http://alanthing.com/blog/2011/01/05/are-your-drupal-sites-running-the-latest-core/"/>
    <updated>2011-01-05T19:25:00-05:00</updated>
    <id>http://alanthing.com/blog/2011/01/05/are-your-drupal-sites-running-the-latest-core</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.echoditto.com">EchoDitto</a>, we host a lot of Drupal sites. Just about all of our web servers contain more than one completely separate Drupal cores since we develop most of our websites independently. We also keep an eye out on <a href="http://drupal.org/security">Drupal Security</a> and when to apply core updates. Since we&#39;re not using Aegir, nor do we run every site off of a single multi-site core install, we need a quick and easy way to see what versions we&#39;re running.</p>

<p>Here&#39;s a shell script we recently developed to report the Drupal Core versions for all of our sites under a single parent folder. It works on Drupal 4 through 7. It&#39;s not been tested outside of our platform, or non-RHEL systems, but it should be universal as long as you have bash, find, awk, and grep. I decided not to use <a href="http://drupal.org/project/drush">Drush</a> because it would involve bootstrapping every site and invoking PHP; this is just more lightweight. Drush also would not work for Drupal 4 sites, which we surprisingly still have a couple kicking around still.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Where to start looking</span>
</span><span class='line'><span class="nv">WEBHOME</span><span class="o">=</span>/var/www/vhosts
</span><span class='line'>
</span><span class='line'><span class="c"># Workaround to fix awk counting below, but it works</span>
</span><span class='line'><span class="nv">WEBHOMECOUNT</span><span class="o">=</span><span class="k">$(($(</span><span class="nb">echo</span> <span class="s2">&quot;${WEBHOME}&quot;</span>|grep -o <span class="s2">&quot;/&quot;</span>|wc -l| sed s/<span class="se">\ </span>//g<span class="k">)</span><span class="o">+</span><span class="m">2</span><span class="k">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change maxdepth from 5 to some other value if your webroot is not being detected</span>
</span><span class='line'><span class="k">for </span>i in <span class="k">$(</span>find <span class="nv">$WEBHOME</span> -maxdepth 5 -type f -name system.module<span class="k">)</span>; <span class="k">do</span>
</span><span class='line'>  <span class="c"># Grabs only the version number from the file as described </span>
</span><span class='line'>  <span class="c"># at http://drupal.org/handbook/version-info</span>
</span><span class='line'>  <span class="nv">VERSION</span><span class="o">=</span><span class="k">$(</span>grep <span class="s2">&quot;VERSION&quot;</span> <span class="k">${</span><span class="nv">i</span><span class="k">}</span>|awk -F<span class="se">\&#39;</span> <span class="s1">&#39;{print $4}&#39;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Drupal 4 has the system.module file in a lower directory than 5+</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[[</span> <span class="nv">$VERSION</span> <span class="o">==</span> 4* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">SITE</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$i</span>|awk -v <span class="nv">count</span><span class="o">=</span><span class="s2">&quot;$WEBHOMECOUNT&quot;</span> -F/ <span class="s1">&#39;{for(j=count;j&lt;=NF-2;j++) \</span>
</span><span class='line'><span class="s1">           printf $j&quot;/&quot;}&#39;</span> | sed <span class="s1">&#39;s/.$//g&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">SITE</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$i</span>|awk -v <span class="nv">count</span><span class="o">=</span><span class="s2">&quot;$WEBHOMECOUNT&quot;</span> -F/ <span class="s1">&#39;{for(j=count;j&lt;=NF-3;j++) \</span>
</span><span class='line'><span class="s1">           printf $j&quot;/&quot;}&#39;</span> | sed <span class="s1">&#39;s/.$//g&#39;</span><span class="k">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -z <span class="nv">$VERSION</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>      <span class="c"># Drupal 7 does not keep the version number on system.module, despite the </span>
</span><span class='line'>      <span class="c"># drupal.org page. Grab from changelog (disabled b/c it includes extra info)</span>
</span><span class='line'>      <span class="c">#VERSION=&quot;$(sed &#39;3q;d&#39; ${WEBHOME}/${SITE}/CHANGELOG.txt)&quot;</span>
</span><span class='line'>      <span class="c"># All versions of Drupal have the version of the module in system.info, </span>
</span><span class='line'>      <span class="c"># so we grab it here for D7. The only reason I&#39;m not using this for all </span>
</span><span class='line'>      <span class="c"># versions is because of the aforementioned drupal.org page</span>
</span><span class='line'>      <span class="nv">VERSION</span><span class="o">=</span><span class="k">$(</span>grep <span class="s2">&quot;version = \&quot;&quot;</span> <span class="k">${</span><span class="nv">WEBHOME</span><span class="k">}</span>/<span class="k">${</span><span class="nv">SITE</span><span class="k">}</span>/modules/system/system.info <span class="se">\</span>
</span><span class='line'>                | awk -F<span class="se">\&quot;</span> <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">  fi</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="nv">$SITE</span> - <span class="nv">$VERSION</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

<p>As a result, you&#39;ll see the directory tree after <code>$WEBHOME</code> where the root of the site is and the version number. Below is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./drupal-version-check.sh
</span><span class='line'>mysite.org/www - 5.22
</span><span class='line'>thissite.net - 4.7.11
</span><span class='line'>subfolder/drupalftw.com - 6.12
</span><span class='line'>blah.org/trunk - 7.0
</span></code></pre></td></tr></table></div></figure>

<p>If you have suggestions, please send them over. This script is still young and I&#39;d love to see if anyone has any better ideas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combined Apache logs for load balanced web servers]]></title>
    <link href="http://alanthing.com/blog/2010/12/07/combined-apache-logs-for-load-balanced-web-servers/"/>
    <updated>2010-12-07T14:34:00-05:00</updated>
    <id>http://alanthing.com/blog/2010/12/07/combined-apache-logs-for-load-balanced-web-servers</id>
    <content type="html"><![CDATA[<p>When dealing with a load spike or unexplained poor performance, once of the first things to do is to check the Apache web server logs. However, when dealing with multiple web servers behind a load balancer, it can be cumbersome to check through multiple logs on different machines.</p>

<p>Luckily, if you have shared storage, it’s pretty simple to write to a single log file. Apache allows for log file locations to go to a pipe, which means you can redirect the output anywhere else. This was initially done to allow Apache to release open file descriptors since it can begin to create problems with more than 300 domains. But you don’t need to have 300 websites to see the benefits of using a pipe for logging.</p>

<p>In your VirtualHost declaration, change your logging options from:</p>
<div class="highlight"><pre><code class="text">CustomLog logs/domain.com-access_log combined
</code></pre></div>
<p>to:</p>
<div class="highlight"><pre><code class="text">CustomLog &quot;|/bin/cat » /var/www/vhosts/_logs/domain.com-access_log&quot; combined
</code></pre></div>
<p>In this example, /var/www/vhosts is the shared SAN storage device, and by using “cat »” we append Apache output in real-time to the log file. As multiple machines do this simultaneously, you begin to have a single log file from multiple machines. You can do the same thing with your ErrorLog:</p>
<div class="highlight"><pre><code class="text">ErrorLog  &quot;|/bin/cat » /var/www/vhosts/_logs/domain.com-error_log&quot;
</code></pre></div>
<p>There is a slight problem with this approach: it doesn’t give us enough information. If one of the 4 servers behind the load balancer was the source of a problem, it would be helpful to determine which server each log entry is coming from. </p>

<p>For CustomLog, we can create a new LogType that adds the server’s IP address at the end of the line, and the LogType name will be “combinedIP”:</p>
<div class="highlight"><pre><code class="text">LogFormat &quot;%h %l %u %t &quot;%r&quot; %&gt;s %b &quot;%{Referer}i&quot; &quot;%{User-Agent}i&quot; %A&quot; combinedIP
</code></pre></div>
<p>This format is identical to “combined” and just adds %A at the end. Then, simply change the end of the CustomLog line:</p>
<div class="highlight"><pre><code class="text">CustomLog &quot;|/bin/cat » /var/www/vhosts/_logs/domain.com-access_log&quot; combinedIP
</code></pre></div>
<p>Here’s an example of what your log file will look like, showing entries from two servers:</p>
<div class="highlight"><pre><code class="text">1.2.3.4 - - [07/Dec/2010:11:22:08 -0500] &quot;GET /blog/feed HTTP/1.1&quot; 304 - &quot;-&quot; &quot;-&quot; 192.168.1.6
5.6.7.8 - - [07/Dec/2010:11:22:08 -0500] &quot;GET /blog/feed HTTP/1.1&quot; 304 - &quot;-&quot; &quot;-&quot; 192.168.1.8
</code></pre></div>
<p>These log entries are the same as the typical “combined” LogType but with the addition of the IP address at the end.</p>

<p>But what about the ErrorLog? There is no way to define a LogType for the ErrorLog, and it would be helpful to know which server originated error, say, if MaxClients was reached, or there is a misconfiguration in a configuration file. Since we’re piping the ErrorLog output to /bin/cat, we can instead pipe it to a script that simply adds the server hostname on the end (I chose not to use an IP address because 1) some servers have multiple IP addresses, and 2) I cannot insert the VirtualHost’s IP address automatically. Better to know the server and then determine the IP address is necessary). We’ll start by creating a simple script at /usr/local/bin/httpd_errors (I’m not using bash since I was not able to get it to write to the log file in real time, it would only write once Apache was reloaded. I did not spend much time to determine why, and I knew it would work in PHP):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">#!/usr/bin/php -q</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$stdin</span> <span class="o">=</span> <span class="nb">fopen</span> <span class="p">(</span><span class="err">‘</span><span class="nx">php</span><span class="o">://</span><span class="nx">stdin</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="nx">r</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="nb">ob_implicit_flush</span> <span class="p">(</span><span class="k">true</span><span class="p">);</span> <span class="c1">// Use unbuffered output</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span> <span class="p">(</span><span class="nv">$stdin</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="nb">chop</span><span class="p">(</span><span class="nv">$line</span><span class="p">)</span><span class="o">.</span><span class="err">”</span> <span class="o">-</span> <span class="err">“</span><span class="o">.</span><span class="nb">system</span><span class="p">(</span><span class="err">‘</span><span class="nx">hostname</span> <span class="o">-</span><span class="nx">f</span><span class="err">’</span><span class="p">)</span><span class="o">.</span><span class="err">”</span><span class="nx">\n</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

<p>Make the script executable with “chmod +x /usr/local/bin/httpd_errors”, and then change your ErrorLog in your Apache configuration:</p>
<div class="highlight"><pre><code class="text">ErrorLog  ”|/usr/local/bin/httpd_errors » /var/www/vhosts/_logs/domain.com-error_log”
</code></pre></div>
<p>And your error logs will now reveal which server the error originated from:</p>
<div class="highlight"><pre><code class="text">[Tue Dec 07 11:20:51 2010] [error] [client 1.2.3.4] File does not exist: /var/www/vhosts/domain.com/favicon.ico - wsrv1
[Tue Dec 07 11:24:27 2010] [error] [client 5.6.7.8] File does not exist: /var/www/vhosts/domain.com/favicon.ico - wsrv2
</code></pre></div>
<p>There you have it, combined Apache logs for multiple web servers. If you have any suggestions, questions, tips, etc, leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbox CLI for CentOS 5 the easy way]]></title>
    <link href="http://alanthing.com/blog/2010/08/12/dropbox-cli-centos-5-easy-way/"/>
    <updated>2010-08-12T12:27:00-04:00</updated>
    <id>http://alanthing.com/blog/2010/08/12/dropbox-cli-centos-5-easy-way</id>
    <content type="html"><![CDATA[<p><a href="http://www.dropbox.com/">Dropbox</a> hardly needs any introduction; put files in your Dropbox and they show up everywhere else you have Dropbox installed and dropbox.com. A feature about Dropbox that is probably not as widely known is that free accounts come with 30 days of undo history and Pro accounts can get &quot;Pack Rat&quot; that keeps unlimited history of changes. The history of files, including reverting deleted files, was particularly interesting to me, since I could hook in my latest daily MySQL dumps from <a href="http://sourceforge.net/projects/automysqlbackup/">AutoMySQLBackup</a> to Dropbox and have 30 days of backups for free available from anywhere dropbox.com is accessible. </p>

<p>The problem is that we use <a href="http://centos.org/">CentOS</a> for our servers and the Dropbox Linux builds are geared for distributions like Ubuntu and Debian that have updated versions of required software like Python, libc, and others, that I did not want to upgrade by hand on my systems and risk the integrity of the system packages. But, I got it to work anyway, read on for how I got Dropbox CLI installed on CentOS without replacing any system files.</p>

<ul>
<li><p>Download <a href="http://www.getdropbox.com/download?plat=lnx.x86">http://www.getdropbox.com/download?plat=lnx.x86</a> or <a href="http://www.getdropbox.com/download?plat=lnx.x86_64">http://www.getdropbox.com/download?plat=lnx.x86_64</a> <a href="http://forums.dropbox.com/topic.php?id=8386#post-53456">(ref)</a></p></li>
<li><p>Extract tar.gz file downloaded and leave in ~ of desired user</p></li>
<li><p>Run <code>~/.dropbox-dist/dropboxd</code> to get Dropbox to provide a URL to go to in your browser to link this computer to your Dropbox account</p></li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./dropboxd
</span><span class='line'>This client is not linked to any account...
</span><span class='line'>Please visit https: //www.dropbox.com/cli_link?host_id<span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxx to link this machine.
</span></code></pre></td></tr></table></div></figure>

<ul>
<li>  After visiting the URL in a browser to which you&#39;ve logged into dropbox.com, you&#39;ll see the following output:</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/nautilus
</span><span class='line'>cannot open display:
</span><span class='line'>Run <span class="s1">&#39;nautilus --help&#39;</span> to see a full list of available <span class="nb">command </span>line options.
</span></code></pre></td></tr></table></div></figure>

<ul>
<li><p>If you cannot quit the app, open another a shell, get the PID by running <code>ps -ef|grep dropbox</code>, and kill PID. The output on your other shell should say:<br>
Terminated</p></li>
<li><p>Download the official Dropbox CLI: <a href="http://www.dropbox.com/download?dl=packages/dropbox.py">http://www.dropbox.com/download?dl=packages/dropbox.py</a> <a href="http://wiki.dropbox.com/TipsAndTricks/TextBasedLinuxInstall">(ref)</a></p></li>
<li><p><code>dropbox.py</code> won&#39;t work without Python 2.6, but let&#39;s not risk messing up our official RHEL packages. Download ActivePython 2.6 (AS Package) from <a href="https://www.activestate.com/activepython/downloads">https://www.activestate.com/activepython/downloads</a> <a href="http://stackoverflow.com/questions/1465036/install-python-2-6-in-centos">(ref)</a></p></li>
<li><p>As mentioned in the AP documentation <a href="http://docs.activestate.com/activepython/2.6/installnotes.html#aspackage">(ref)</a>, run the installer with <code>./install.sh</code> and install where desired. It defaults to <em>/opt/ActivePython-2.6</em>, which is fine because it does not conflcit with the system default python 2.4 install. For my purposes, I had created a user called <em>dropbox</em> that did not have root privileges, so I installed to <em>/home/dropbox/ActivePython-2.6</em>.</p></li>
<li><p>Edit <em>dropbox.py</em> and change <code>#!/usr/bin/python</code> to the path you just installed AP to. For my installation, it&#39;s set to <code>#!/home/dropbox/bin/ActivePython-2.6/bin/python</code></p></li>
<li><p>Run <code>dropbox.py</code> without commands to see your available options.</p></li>
</ul>

<p>Optional: To suppress LAN Sync broadcasts, download <a href="http://wiki.dropbox.com/TipsAndTricks/TextBasedLinuxInstall?action=AttachFile&amp;do=view&amp;target=dropboxp2p.py">dropboxp2p.py</a> <a href="http://wiki.dropbox.com/TipsAndTricks/TextBasedLinuxInstall">(ref)</a>, edit the first line to use the ActivePython binary as you did for dropbox.py, and run <code>./dropboxp2p -d</code> to disable LAN syncing (unless you have other machines in the LAN with Dropbox installed, and your firewalls are set up appropriately).</p>
]]></content>
  </entry>
  
</feed>
